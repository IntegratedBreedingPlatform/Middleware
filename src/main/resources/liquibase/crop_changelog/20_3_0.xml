<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

	<changeSet author="mderamos" id="v20.3.0-1">
		<preConditions onFail="MARK_RAN">
			<not>
				<tableExists tableName="external_reference_listnms"/>
			</not>
		</preConditions>
		<comment>
			Create external_reference_listnms table
		</comment>
		<createTable tableName="external_reference_listnms">
			<column name="id" type="int" autoIncrement="true">
				<constraints primaryKey="true"/>
			</column>
			<column name="listId" type="int">
				<constraints nullable="false" foreignKeyName="fk_external_reference_listnms" references="listnms(listId)"/>
			</column>
			<column name="reference_id" type="varchar(2000)">
				<constraints nullable="false"/>
			</column>
			<column name="reference_source" type="varchar(255)">
				<constraints nullable="false"/>
			</column>
			<column name="created_date" type="timestamp" defaultValueComputed="CURRENT_TIMESTAMP">
				<constraints nullable="false"/>
			</column>
			<column name="created_by" type="int" defaultValue="0">
				<constraints nullable="false"/>
			</column>
			<column name="modified_date" type="timestamp">
				<constraints nullable="true"/>
			</column>
			<column name="modified_by" type="int">
				<constraints nullable="true"/>
			</column>
		</createTable>
	</changeSet>

	<changeSet author="aldrin" id="v20.3.0-2">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">select count(*) from dataset_type where name = 'SUMMARY_STATISTICS';</sqlCheck>
		</preConditions>
		<comment>Add dataset_type record for Summary Statistics Dataset</comment>
        <sql>
			INSERT INTO dataset_type
				(`dataset_type_id`, `name`, `description`, `cvterm_id`, `is_subobs_type`, `is_obs_type`)
			VALUES (12, 'SUMMARY_STATISTICS', 'Summary Statistics Dataset', NULL, 0, 0);
        </sql>
    </changeSet>

	<changeSet author="aldrin" id="v20.3.0-3">
		<preConditions onFail="MARK_RAN">
			<columnExists tableName="dataset_type" columnName="cvterm_id"/>
        </preConditions>
		<comment>
			Delete 'cvterm_id' column of 'dataset_type' table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			ALTER TABLE dataset_type DROP COLUMN cvterm_id;
		</sql>
	</changeSet>

	<changeSet author="darla" id="v20.3.0-4">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(1) > 0
				 FROM projectprop pp
				 INNER JOIN project p ON p.project_id = pp.project_id
				 INNER JOIN dataset_type d ON d.dataset_type_id = p.dataset_type_id
				 WHERE d.name = 'MEANS' AND pp.type_id = 1808;
			</sqlCheck>
        </preConditions>
		<comment>
			Change variable type in projectprop of means variables in means dataset to Analysis (1811) from Trait (1808)
		</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE projectprop pp
			 INNER JOIN project p ON p.project_id = pp.project_id
			 INNER JOIN dataset_type d ON d.dataset_type_id = p.dataset_type_id
			   SET pp.type_id = 1811
			 WHERE d.name = 'MEANS' AND pp.type_id = 1808;
		</sql>
	</changeSet>

	<changeSet author="darla" id="v20.3.0-5">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_summary_statistics_data';
			</sqlCheck>
        </preConditions>
		<comment>
			Create stored procedure migrate_summary_statistics_data for migrating summary statistics data
			from environment dataset to new Summary Statistics dataset
		</comment>
		<sql dbms="mysql" splitStatements="false">
			<![CDATA[
				CREATE PROCEDURE `migrate_summary_statistics_data`()
				BEGIN

					DECLARE studyId INT;
					DECLARE studyName VARCHAR(255);
					DECLARE studyDescription VARCHAR(255);
					DECLARE programUUID VARCHAR(36);
					DECLARE trialEnvironmentDatasetId INT;
					DECLARE summaryStatDatasetTypeId INT;
					DECLARE summaryStatsDatasetId INT;

					DECLARE done INT DEFAULT FALSE;
					-- Retrieve studies with existing Analysis Summary variables in Trial Environment dataset
					DECLARE cur1 CURSOR FOR
						SELECT study.project_id as `studyId`, study.name as `studyName`, study.description as `studyDescription`, study.program_uuid as `programUUID`, env.project_id as `trialEnvironmentDatasetId`, ds.dataset_type_id as 'summaryStatDatasetTypeId'
						  FROM project study
						 INNER JOIN project env ON env.study_id = study.project_id AND env.dataset_type_id = 3
						 INNER JOIN dataset_type ds ON ds.name = 'SUMMARY_STATISTICS'
						 WHERE EXISTS (SELECT 1 FROM projectprop pp WHERE pp.project_id = env.project_id AND pp.type_id = 1811)
						   AND NOT EXISTS (SELECT 1 FROM project summary
											INNER JOIN dataset_type ds ON ds.name = 'SUMMARY_STATISTICS'
											WHERE summary.study_id = study.project_id AND summary.dataset_type_id = ds.dataset_type_id);
					DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

					OPEN cur1;
						project_loop: LOOP FETCH cur1 INTO  studyId, studyName, studyDescription, programUUID, trialEnvironmentDatasetId, summaryStatDatasetTypeId;
							SET @NEW_ORDER = 0;
							IF done THEN
								LEAVE project_loop;
							END IF;

							-- Create new dataset for Summary Statistics
							INSERT INTO `project` (`name`,`description`,`program_uuid`,`study_id`,`parent_project_id`,`dataset_type_id`)
							VALUES (CONCAT(studyName, '-SUMMARY-STATISTICS'), CONCAT(studyDescription, '-SUMMARY-STATISTICS'), programUUID, studyId, studyId, summaryStatDatasetTypeId);

							SET summaryStatsDatasetId = LAST_INSERT_ID();

							-- Insert fixed variables in the summary statistics dataset
							INSERT INTO `projectprop`
							(`project_id`,`type_id`,`value`,`rank`,`variable_id`,`alias`)
							VALUES
							(summaryStatsDatasetId, 1805, NULL, 1, 8150, 'DATASET_NAME'),
							(summaryStatsDatasetId, 1805, NULL, 2, 8155, 'DATASET_TITLE'),
							(summaryStatsDatasetId, 1806, NULL, 3, 8170, 'TRIAL_INSTANCE'),
							(summaryStatsDatasetId, 1806, NULL, 4, 8190, 'LOCATION_NAME');

							-- Create experiment records for summary statistics dataset
							INSERT INTO nd_experiment (`nd_geolocation_id`, `type_id`, `obs_unit_id`, `project_id`)
							SELECT `nd_geolocation_id`, 1180 as `type_id`, CASE WHEN crop.use_uuid THEN UUID() ELSE SUBSTRING(CONCAT(crop.plot_code_prefix, 'P',MD5(RAND())) FROM 1 FOR 13) END, summaryStatsDatasetId
							 FROM nd_experiment
							 INNER JOIN workbench.workbench_crop crop ON crop.db_name = DATABASE()
							 WHERE project_id = trialEnvironmentDatasetId;

							-- Link the existing summary statistics variables to the new dataset
							UPDATE projectprop SET project_id = summaryStatsDatasetId WHERE project_id = trialEnvironmentDatasetId AND type_id = 1811;

							-- Reorder the ranking of projectprop variables
							UPDATE projectprop SET RANK= @NEW_ORDER:=@NEW_ORDER+1 WHERE project_id = summaryStatsDatasetId ORDER BY RANK;

							-- Link the existing phenotype to the new Summary Statistic experiments
							UPDATE phenotype ph
							 INNER JOIN nd_experiment env_exp ON env_exp.nd_experiment_id = ph.nd_experiment_id AND env_exp.type_id = 1020
							 INNER JOIN nd_experiment summary_exp ON summary_exp.nd_geolocation_id = env_exp.nd_geolocation_id AND summary_exp.type_id = 1180
							 INNER JOIN projectprop pp ON pp.project_id = summary_exp.project_id AND pp.type_id = 1811 AND pp.variable_id = ph.observable_id
							   SET ph.nd_experiment_id = summary_exp.nd_experiment_id
							 WHERE env_exp.project_id = trialEnvironmentDatasetId;

						END LOOP project_loop;
					CLOSE cur1;

				END;
			]]>
		</sql>
	</changeSet>


	<changeSet author="darla" id="v20.3.0-6">
		<preConditions onFail="MARK_RAN">
			<and>
				<!-- Check if dataset type for Summary Statitics data has been seeded previously -->
				<sqlCheck expectedResult="1">
					SELECT COUNT(1) FROM dataset_type WHERE name = 'SUMMARY_STATISTICS';
				</sqlCheck>
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'migrate_summary_statistics_data';
				</sqlCheck>
			</and>

        </preConditions>
		<comment>
			Call stored procedure migrate_summary_statistics_data for miigrating summary statistics data
			from environment dataset to new Summary Statistics dataset
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CALL migrate_summary_statistics_data();
		</sql>
	</changeSet>

	<changeSet author="darla" id="v20.3.0-7">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_summary_statistics_data';
			</sqlCheck>
		</preConditions>
		<comment>Drop procedure migrate_summary_statistics_data</comment>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE migrate_summary_statistics_data;
		</sql>
	</changeSet>

</databaseChangeLog>
