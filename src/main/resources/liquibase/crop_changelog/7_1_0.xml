<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
		http://www.liquibase.org/xml/ns/dbchangelog-ext
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">


	<changeSet author="nahuel" id="v7.1.0-1">
		<preConditions onFail="MARK_RAN">
			<not>
				<columnExists tableName="projectprop" columnName="variable_id"/>
			</not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			CREATE TABLE `projectprop_old` (
			`projectprop_id` INT(11) NOT NULL AUTO_INCREMENT,
			`project_id`     INT(11) NOT NULL,
			`type_id`        INT(11) NOT NULL,
			`value`          VARCHAR(255)     DEFAULT NULL,
			`rank`           INT(11) NOT NULL DEFAULT '0',
			PRIMARY KEY (`projectprop_id`)
			) AS SELECT *
			 FROM projectprop;

			CREATE TABLE `projectprop_new` (
			`projectprop_id` int(11) NOT NULL AUTO_INCREMENT,
			`project_id` int(11) NOT NULL,
			`type_id` int(11) NOT NULL,
			`value` varchar(255) DEFAULT NULL,
			`rank` int(11) NOT NULL DEFAULT '0',
			`variable_id` int(11) NOT NULL,
			`alias` varchar(255) DEFAULT NULL,
			PRIMARY KEY (`projectprop_id`),
			UNIQUE KEY `projectprop_idx1` (`project_id`,`type_id`,`rank`,`variable_id`),
			KEY `projectprop_idx2` (`type_id`),
			KEY `projectprop_idx3` (`variable_id`),
			CONSTRAINT `projectprop_2_fk1` FOREIGN KEY (`project_id`) REFERENCES `project` (`project_id`) ON DELETE CASCADE,
			CONSTRAINT `projectprop_2_fk2` FOREIGN KEY (`type_id`) REFERENCES `cvterm` (`cvterm_id`) ON DELETE CASCADE
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 AS SELECT
			   pp.project_id,
			   pptype.type_id 'type_id',
			   ppvalue.value  'value',
			   pp.rank,
			   pp.value       'variable_id',
			   pptype.value   'alias'
			 FROM projectprop pp
			   INNER JOIN projectprop pptype ON pptype.rank = pp.rank
												AND pptype.project_id = pp.project_id
												AND pptype.type_id != 1060 -- Variable description
												AND pptype.type_id != 1070 -- Standardvariableid
												AND pp.value != pptype.type_id
			   LEFT JOIN projectprop ppvalue ON pp.value = ppvalue.type_id
												AND pp.rank = ppvalue.rank
												AND pp.project_id = ppvalue.project_id
			   LEFT JOIN cvterm variable ON pp.value = variable.cvterm_id
			 WHERE pp.type_id = 1070
			 ORDER BY pp.project_id, pp.rank;

			DROP TABLE projectprop;

			RENAME TABLE
			projectprop_new TO projectprop;
		</sql>
	</changeSet>

	<changeSet author="nahuel" id="v7.1.0-2" >
		<preConditions onFail="MARK_RAN">
			<not>
				<tableExists tableName="project_details"/>
			</not>
		</preConditions>
		<createTable tableName="project_details">
			<column name="project_details_id" type="INT" autoIncrement="true">
				<constraints primaryKey="true"/>
			</column>
			<column name="deleted" type="TINYINT(1) UNSIGNED ZEROFILL" defaultValue="0">
				<constraints nullable="false"/>
			</column>
		</createTable>
	</changeSet>

	<changeSet author="nahuel" id="v7.1.0-3" >
		<preConditions onFail="MARK_RAN">
			<not>
				<columnExists tableName="project" columnName="project_details_id"/>
			</not>
		</preConditions>
		<addColumn tableName="project">
			<column name="project_details_id" type="INT" >
				<constraints foreignKeyName="fk_project_details_id"
							 nullable="true"
							 referencedTableName="project_details"
							 referencedColumnNames="project_details_id"
							 deleteCascade="true"/>
			</column>
		</addColumn>
	</changeSet>

	<changeSet author="nahuel" id="v7.1.0-4" >
		<sql dbms="mysql" splitStatements="true">
			DROP procedure IF EXISTS update_project_details_with_deleted_studies;
		</sql>
		<sql dbms="mysql" splitStatements="false">
			CREATE PROCEDURE update_project_details_with_deleted_studies ()
			  BEGIN

				DECLARE projectId INT;
				DECLARE updateDone INT DEFAULT 0;

				DECLARE cur1 CURSOR FOR
				  SELECT p.project_id
				  FROM projectprop pp
					INNER JOIN project p ON pp.project_id = p.project_id
				  WHERE pp.variable_id = 8006 AND value = 12990;

				DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET updateDone = 1;

				OPEN cur1;
				read_loop: LOOP FETCH cur1
				INTO projectId;

				  IF updateDone = 1
				  THEN
					LEAVE read_loop;
				  END IF;

				  INSERT INTO project_details (deleted) VALUES (1);
				  SET @id = LAST_INSERT_ID();
				  UPDATE project SET project_details_id = @id WHERE project_id = projectId;

				END LOOP read_loop;

			  END
		</sql>
		<sql dbms="mysql" splitStatements="true">
			CALL update_project_details_with_deleted_studies();
			DROP PROCEDURE update_project_details_with_deleted_studies;
		</sql>
	</changeSet>

</databaseChangeLog>
