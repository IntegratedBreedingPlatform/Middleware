<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet author="mderamos" id="v23.1.0-1">
        <preConditions onFail="MARK_RAN">
            <not>
                <sqlCheck expectedResult="0">
                    SELECT COUNT(*) from names where nstat=9;
                </sqlCheck>
            </not>
        </preConditions>
        <comment> Remove germplasm names with deleted status(9)
        </comment>
        <sql dbms="mysql" splitStatements="true">
            DELETE FROM names where nstat=9;
        </sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-2">
        <preConditions onFail="MARK_RAN">
            <and>
                <sqlCheck expectedResult="0">
                    SELECT COUNT(*) FROM information_schema.routines
                    WHERE routine_schema = DATABASE() AND specific_name = 'fix_names_with_invalid_name_type';
                </sqlCheck>
                <not>
                    <sqlCheck expectedResult="0">
                        SELECT COUNT(*) FROM names name
                            WHERE NOT EXISTS (SELECT * from udflds nametype WHERE nametype.fldno = name.ntype);
                    </sqlCheck>
                </not>
            </and>
        </preConditions>
        <comment>
            Create stored procedure to "fix" names with invalid name types. Names with invalid nametype will be deleted
            except for cases where all nametypes for a germplasm is invalid. The deleted name entries will be added
            to a names backup table.
        </comment>
        <sql dbms="mysql" splitStatements="false">
            <![CDATA[
            CREATE PROCEDURE `fix_names_with_invalid_name_type`()
            BEGIN
                DECLARE gid INT;
                DECLARE isPreferredNameInvalid INT DEFAULT false;
                DECLARE hasValidNames INT DEFAULT false;
                DECLARE done INT DEFAULT false;
                DECLARE validNameId INT;

                -- retrieve germplasm with invalid preferred name types
                DECLARE gid_with_invalid_name_types CURSOR FOR
                    SELECT name.gid as `gid` FROM names name
                    WHERE name.nstat = 1 AND NOT EXISTS (SELECT * from udflds nametype WHERE nametype.fldno = name.ntype);

                DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

                DECLARE EXIT HANDLER FOR SQLEXCEPTION
                BEGIN
                    ROLLBACK;
                    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error in fixing names with invalid nameTypes.';
                END;

                OPEN gid_with_invalid_name_types;
                gid_with_invalid_name_types_loop: LOOP FETCH gid_with_invalid_name_types INTO gid;
                    IF done THEN
                        CLOSE gid_with_invalid_name_types;
                        LEAVE gid_with_invalid_name_types_loop;
                    END IF;

                    SELECT EXISTS (SELECT name.gid FROM names name
                        WHERE name.gid = gid AND
                        EXISTS (SELECT * from udflds nametype WHERE nametype.fldno = name.ntype)) INTO hasValidNames;

                    -- check if there are valid names for the germplasm and set one of them as the preferred
                    IF hasValidNames THEN
                        SELECT name.nid INTO validNameId FROM names name WHERE name.gid = gid AND
                            EXISTS (SELECT * from udflds nametype WHERE nametype.fldno = ntype) LIMIT 1;

                        UPDATE names SET nstat = 1 WHERE nid = validNameId;
                    ELSE
                        -- if all names have invalid nametype, change the nametype of the preferred to LNAME
                        UPDATE names name SET name.ntype = (SELECT fldno FROM udflds where fcode='LNAME'
                            AND ftable = 'NAMES' AND ftype = 'NAME')
                            WHERE name.gid = gid AND name.nstat = 1;
                    END IF;
                END LOOP gid_with_invalid_name_types_loop;

                CREATE TABLE names_invalid_ntype_bkp AS
                    SELECT * FROM names name
                    WHERE NOT EXISTS (SELECT * from udflds nametype WHERE nametype.fldno = name.ntype);

                SET SQL_SAFE_UPDATES = 0;

                DELETE FROM names
                    WHERE NOT EXISTS (SELECT * from udflds nametype WHERE nametype.fldno = ntype);

                SET SQL_SAFE_UPDATES = 1;

                COMMIT;
            END;
            ]]>
        </sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-3">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.routines
                WHERE routine_schema = DATABASE() AND specific_name = 'fix_names_with_invalid_name_type';
            </sqlCheck>
        </preConditions>
        <comment>
            Call stored procedure fix_names_with_invalid_name_type for "fixing" names with invalid nametypes.
        </comment>
        <sql dbms="mysql" splitStatements="true">
            CALL fix_names_with_invalid_name_type();
        </sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-5">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.routines
                WHERE routine_schema = DATABASE() AND specific_name = 'fix_names_with_invalid_name_type';
            </sqlCheck>
        </preConditions>
        <comment>Drop procedure fix_names_with_invalid_name_type</comment>
        <sql dbms="mysql" splitStatements="false">
            DROP PROCEDURE fix_names_with_invalid_name_type;
        </sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-6">
        <preConditions onFail="MARK_RAN">
            <and>
                <sqlCheck expectedResult="0">
                    SELECT COUNT(*) FROM information_schema.routines
                    WHERE routine_schema = DATABASE() AND specific_name = 'enforce_unique_germplasm_name_type';
                </sqlCheck>
                <not>
                    <sqlCheck expectedResult="0">
                        SELECT COUNT(*) FROM
                            (SELECT COUNT(*) FROM names GROUP BY gid, ntype HAVING COUNT(*) > 1) nametype_duplicates;
                    </sqlCheck>
                </not>
            </and>
        </preConditions>
        <comment>
            Create stored procedure enforce_unique_germplasm_name_type for enforcing unique germplasm's name nametypes
            and creating new nametypes for the duplicates.
        </comment>
        <sql dbms="mysql" splitStatements="false">
			<![CDATA[
            CREATE PROCEDURE `enforce_unique_germplasm_name_type`()
            BEGIN
                DECLARE nameId INT;
                DECLARE duplicateNameId INT;
                DECLARE gid INT;
                DECLARE nameTypeId INT;
                DECLARE nameTypeIndex INT DEFAULT 1;
                DECLARE baseNameType VARCHAR(255);
                DECLARE currentNameType VARCHAR(255);

                DECLARE hasExistingNameType INT DEFAULT FALSE;
                DECLARE isNameTypeUsedByGermplasm INT DEFAULT TRUE;
                DECLARE done INT DEFAULT FALSE;

                -- retrieved entries will not be updated
                DECLARE names_with_duplicates CURSOR FOR
                    SELECT name.nid as `nameId`, name.gid as `gid`, name.ntype as `nameTypeId`
                    FROM names name
                    group by name.gid, name.ntype HAVING COUNT(*) > 1;

                -- duplicate nametypes will be updated to remove duplicates
                DECLARE duplicate_names CURSOR FOR
                    SELECT name.nid as `duplicateNameId`
                    FROM names name
                    WHERE name.gid = gid AND name.ntype = nameTypeId and name.nid != nameId;

                DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

                DECLARE EXIT HANDLER FOR SQLEXCEPTION
                BEGIN
                    ROLLBACK;
                    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error in enforcing unique germplasm name type.';
                END;

                OPEN names_with_duplicates;
                names_loop: LOOP FETCH names_with_duplicates INTO  nameId, gid, nameTypeId;

                        IF done THEN
                            CLOSE names_with_duplicates;
                            LEAVE names_loop;
                        END IF;

                        -- reset index to 0
                        SET nameTypeIndex = 0;

                        SELECT nameType.fcode INTO baseNameType
                            FROM udflds nameType
                            WHERE nameType.fldno = nameTypeId;

                        IF baseNameType REGEXP '_[0-9]$' THEN
                            -- Get the base name, ie: LNAME_1 will return LNAME
                            SELECT LEFT(nameType.fcode, CHAR_LENGTH(nameType.fcode) - LOCATE('_', REVERSE(nameType.fcode))) INTO baseNameType
                                from udflds nameType
                                WHERE nameType.fldno = nameTypeId;
                        END IF;

                    OPEN duplicate_names;
                    duplicate_names_loop: LOOP FETCH duplicate_names INTO duplicateNameId;
                        IF done THEN
                            -- set done to false for Outer loop's Continue handling
                            SET done = false;
                            CLOSE duplicate_names;
                            LEAVE duplicate_names_loop;
                        END IF;

                        -- set initially to TRUE to enter loop
                        SET isNameTypeUsedByGermplasm = TRUE;

                        WHILE isNameTypeUsedByGermplasm DO
                            SELECT (nameTypeIndex + 1) INTO nameTypeIndex;
                            SELECT CONCAT(baseNameType, CONCAT('_', nameTypeIndex)) INTO currentNameType;

                            -- Check if nametype is existing
                            SELECT EXISTS(SELECT fcode FROM udflds WHERE fcode = currentNameType
                                AND ftable = 'NAMES' AND ftype = 'NAME') INTO hasExistingNameType;

                            IF hasExistingNameType THEN
                                -- Check if existing nametype is used by germplasm
                                SELECT EXISTS(SELECT name.ntype  FROM names name
                                    INNER JOIN udflds nametype ON name.ntype = nametype.fldno
                                    WHERE nametype.fcode = currentNameType AND name.gid = gid) INTO isNameTypeUsedByGermplasm;
                            ELSE
                                -- Create a new nametype if not yet existing in Database
                                INSERT INTO udflds(ftable, ftype, fcode, fname, ffmt, fdesc, lfldno, fuid, fdate, scaleid)
                                SELECT nametype.ftable, nametype.ftype, currentNameType, nametype.fname, nametype.ffmt,
                                    nametype.fdesc, nametype.lfldno, nametype.fuid, nametype.fdate, nametype.scaleid
                                    FROM udflds nametype WHERE nametype.fldno = nameTypeId;
                                SET isNameTypeUsedByGermplasm = FALSE;
                            END IF;
                        END WHILE;

                        -- update the name's nametype
                        UPDATE names name
                            SET name.ntype = (SELECT fldno FROM udflds WHERE fcode = currentNameType AND ftable = 'NAMES' AND ftype = 'NAME')
                            WHERE name.nid = duplicateNameId;
                    END LOOP duplicate_names_loop;
                END LOOP names_loop;
                COMMIT;
            END;
            ]]>
		</sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-7">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.routines
                WHERE routine_schema = DATABASE() AND specific_name = 'enforce_unique_germplasm_name_type';
            </sqlCheck>
        </preConditions>
        <comment>
            Call stored procedure enforce_unique_germplasm_name_type for enforcing unique germplasm's name nametypes
            and creating new nametypes for the duplicates.
        </comment>
        <sql dbms="mysql" splitStatements="true">
            CALL enforce_unique_germplasm_name_type();
        </sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-8">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM information_schema.routines
                WHERE routine_schema = DATABASE() AND specific_name = 'enforce_unique_germplasm_name_type';
            </sqlCheck>
        </preConditions>
        <comment>Drop procedure enforce_unique_germplasm_name_type</comment>
        <sql dbms="mysql" splitStatements="false">
            DROP PROCEDURE enforce_unique_germplasm_name_type;
        </sql>
    </changeSet>

    <changeSet author="mderamos" id="v23.1.0-9">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
                    WHERE TABLE_NAME = 'names' AND CONSTRAINT_NAME='names_uc1' and TABLE_SCHEMA = DATABASE();
            </sqlCheck>
        </preConditions>
        <comment>Add unique constraint to names table for gid and ntype columns</comment>
        <addUniqueConstraint columnNames="gid, ntype" constraintName="names_uc1" tableName="names" />
    </changeSet>
</databaseChangeLog>
