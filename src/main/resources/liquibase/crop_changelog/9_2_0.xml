<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
		http://www.liquibase.org/xml/ns/dbchangelog-ext
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

	<changeSet author="clarissa" id="v9.2.0-1">
		<preConditions onFail="MARK_RAN">
			<columnExists tableName="project" columnName="created_by"/>
		</preConditions>
		<comment>
			Assign project.created_by = admin user id for nursery, trial templates. Jira IBP-1655
		</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE project p SET p.created_by =
				(SELECT userid FROM users WHERE uname='admin')
			WHERE NAME LIKE '%template' AND program_uuid IS NULL;
		</sql>
	</changeSet>
	<changeSet author="clarissa" id="v9.2.0-2">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">select case when ('ibdbv2_bean_merged' = DATABASE()) then 1 else 0 end from dual;</sqlCheck>
		</preConditions>
		<comment>
			Apply fix on bean template and reduce the number of traits.
		</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE projectprop SET type_id = 1804 WHERE type_id = 1042;

			DELETE FROM projectprop WHERE project_id = 3510 AND rank IN
			(10,17,22,23,24,25,26,27,28,29,31,32,33,34,35,39,40,46,47,48,49,
			51,53,54,55,59,60,61,64,65,66,68,69,70,71,73,77,78,80,82,83,89,
			90,91,92,93,94,95,97,101,102,104,105,109,110,111,112,113,114,115,
			116,119,120,121,122,126,127,130,132,134,135,136,138,139,140,
			141,144,145,150,151,152,156,157,158,159,160,163,164,174,175,
			176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,
			191,192,193,194,195,197,199,201,203,204,205,206,207,208,209,210,
			211,212,213,214,215,216,221,222,223,224,225,227,228);

		</sql>
	</changeSet>

	<changeSet author="vanina" id="v9.2.0-1">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT count(*)
				FROM information_schema.REFERENTIAL_CONSTRAINTS
				where DELETE_RULE = 'CASCADE'
				AND table_name = 'projectprop'
				AND CONSTRAINT_NAME = 'projectprop_2_fk2';
			</sqlCheck>
		</preConditions>
		<comment>Remove cascade on projectprop_2_fk2</comment>
		<sql dbms="mysql" splitStatements="true">
				ALTER TABLE projectprop
				DROP FOREIGN KEY projectprop_2_fk2;
				ALTER TABLE projectprop
				ADD CONSTRAINT projectprop_2_fk2
				  FOREIGN KEY (type_id)
				  REFERENCES cvterm (cvterm_id)
				  ON DELETE NO ACTION;
		</sql>
	</changeSet>

	<changeSet author="cuenyad" id="v9.2.0-2">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(*) > 0 FROM listnms WHERE listtype in ('TRIAL','NURSERY');
			</sqlCheck>
		</preConditions>
		<comment>update in listnms table  the listtype with TRIAL or NURSERY by STUDY</comment>
		<sql dbms="mysql" splitStatements="true">
			update listnms set listtype='STUDY' where listtype in ('TRIAL','NURSERY');
		</sql>
	</changeSet>

	<changeSet author="vanina" id="v9.2.0-3">
	<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT COUNT(*)
					FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
					WHERE TABLE_NAME = 'project'
					AND CONSTRAINT_NAME = 'study_type_fk'
					AND TABLE_SCHEMA = DATABASE();
				</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			ALTER TABLE project DROP FOREIGN KEY study_type_fk;
		</sql>
	</changeSet>

	<changeSet author="vanina" id="v9.2.0-4">
		<preConditions onFail="MARK_RAN">
			<tableExists tableName="study_type"/>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			DROP TABLE study_type;

			CREATE TABLE study_type (
			  study_type_id INT NOT NULL AUTO_INCREMENT,
			  label VARCHAR(45) NOT NULL,
			  name VARCHAR(45) NOT NULL,
			  cvterm_id INT NULL,
			  visible TINYINT NOT NULL,
			  PRIMARY KEY (study_type_id),
			  UNIQUE INDEX label_UNIQUE (label ASC),
			  UNIQUE INDEX name_UNIQUE (name ASC));

			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Nursery", "N", 10000, 1);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Hybridization Nursery", "HB", 10001, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Pedigree Nursery", "PN", 10002, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Characterization Nursery", "CN", 10003, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("BULU Observational Nursery", "BON", 10007, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Trial", "T", 10010, 1);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Observational Yield Trial", "OYT", 10005, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Replication Yield Trial", "RYT", 10015, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("On Form Trial", "OFT", 10017, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Survey", "S", 10020, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Experiment", "E", 10030, 0);
		</sql>
	</changeSet>


	<changeSet author="vanina" id="v9.2.0-5">
		<preConditions onFail="MARK_RAN">
			<not><columnExists tableName="project" columnName="study_type_id"/> </not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			ALTER TABLE project
			  ADD COLUMN study_type_id INT;

			UPDATE project p SET p.study_type_id = (SELECT st.study_type_id FROM study_type st where st.name = p.study_type);

			ALTER TABLE project DROP COLUMN study_type;

			ALTER TABLE project
			  ADD CONSTRAINT study_type_fk
			FOREIGN KEY (study_type_id)
			REFERENCES study_type (study_type_id)
			  ON DELETE NO ACTION
			  ON UPDATE NO ACTION;
		</sql>
	</changeSet>

	<changeSet id="v9.2.0-6" author="clarysabel">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				select count(*) from cvterm where cvterm_id = 10169;
			</sqlCheck>
		</preConditions>
		<comment>Create entry list order experimental design</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO cvterm (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
			VALUES (10169, 2040, 'ELO', 'Entry list order', null, 0, 0);
			INSERT INTO cvterm_relationship (type_id, subject_id, object_id)
			VALUES (1190, 17265, 10169);
		</sql>
	</changeSet>

	<changeSet id="v9.2.0-7" author="vanina">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					select count(*) from projectprop where alias = 'EXPT_DESIGN' AND value = '';
				</sqlCheck>
			</not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			UPDATE projectprop
			SET value = 10169
			WHERE alias = 'EXPT_DESIGN' AND value = '';
		</sql>
	</changeSet>


	<changeSet id="v9.2.0-8" author="vanina">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					select count(*) from nd_geolocationprop where type_id = 8135 AND value = '';
				</sqlCheck>
			</not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			UPDATE nd_geolocationprop
			SET VALUE = 10169
			WHERE type_id = 8135 AND value = '';
		</sql>
	</changeSet>

	<changeSet id="v9.2.0-9" author="vanina">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_check_list';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE migrate_check_list;
		</sql>
	</changeSet>

		<changeSet id="v9.2.0-10" author="vanina">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_check_list';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			<![CDATA[
				CREATE PROCEDURE migrate_check_list()
				  BEGIN

				    DECLARE done INT DEFAULT FALSE;
				    DECLARE checkType INT(11);
				    DECLARE listId INT(11);
				    DECLARE germplasm_id INT(11);
				    DECLARE countInsert INT;
				    DECLARE listdataProjectId INT;
				    DECLARE countInsertListnms INT;


				    DECLARE cur1 CURSOR FOR
				      -- ONLY UPDATE in case of drag and drop checks
				      SELECT
				        listDataCheck.check_type,
				        listDataCheck.germplasm_id,
				        listNursery.listid,
				        listDataCheck.listdata_project_id
				      FROM
				        listdata_project listDataCheck
				        INNER JOIN
				        listnms listCheck ON listDataCheck.list_id = listCheck.listid
				        INNER JOIN
				        listnms listNursery ON listNursery.projectid = listCheck.projectid
				        inner join listdata_project listDataNursery on listDataNursery.list_id = listNursery.listid
				      WHERE
				        listCheck.listtype = 'CHECK'
				        AND listNursery.listtype = 'STUDY'
				        and listDataNursery.germplasm_id = listDataCheck.germplasm_id
				        AND (listDataNursery.check_type = '' OR listDataNursery.check_type = 0)
				        AND listDataCheck.check_type != 10170
				        AND listDataCheck.entry_id < (select max(entry_id)
				                                      from listdata_project lmax
				                                      where lmax.list_id = listNursery.listid);

				    DECLARE exit handler for sqlexception
				    BEGIN
				      -- ERROR

				      ROLLBACK;
				      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Custom error';
				    END;

				    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
				    START TRANSACTION;
				    OPEN cur1;
				    read_loop: LOOP FETCH cur1
				    INTO checkType, germplasm_id, listId, listdataProjectId;

				      IF done
				      THEN

				        LEAVE read_loop;

				      END IF;

				      UPDATE listdata_project ldp
				      SET
				        ldp.check_type = checkType
				      WHERE
				        ldp.germplasm_id = germplasm_id
				        AND ldp.list_id = listId;

				      DELETE FROM listdata_project WHERE listdata_project_id = listdataProjectId;

				    END LOOP read_loop;
				    CLOSE cur1;

					INSERT INTO listdata_project (list_id, germplasm_id, check_type, entry_id, entry_code, seed_source, designation, group_name, duplicate_notes, crossing_date, notes)
				      -- -- items from other browsed list (different gids)
						SELECT DISTINCT
						    (SELECT
						            l.listid
						        FROM
						            listnms l
						        WHERE
						            l.projectid = listCheck.projectid
						                AND l.listtype = 'STUDY'),
						    listDataCheck.germplasm_id,
						    listDataCheck.check_type,
						    listDataCheck.entry_id,
						    listDataCheck.entry_code,
						    listDataCheck.seed_source,
						    listDataCheck.designation,
						    listDataCheck.group_name,
						    listDataCheck.duplicate_notes,
						    listDataCheck.crossing_date,
						    listDataCheck.notes
						FROM
						    listdata_project listDataCheck
						        INNER JOIN
						    listnms listCheck ON listDataCheck.list_id = listCheck.listid
						WHERE
						    listCheck.listtype = 'CHECK'
						        AND listDataCheck.check_type != 10170
						        AND NOT EXISTS( (SELECT
						            1
						        FROM
						            listnms listNursery
						                INNER JOIN
						            listdata_project listDataNursery ON listDataNursery.list_id = listNursery.listid
						        WHERE
						            listDataNursery.germplasm_id = listDataCheck.germplasm_id
						                AND listDataNursery.list_id != listDataCheck.list_id
						                AND listNursery.listtype = 'STUDY'
						                AND (listDataNursery.check_type = '' OR listDataNursery.check_type = 0)
						                AND listNursery.projectid = listCheck.projectid))
				      UNION
				      SELECT
				        -- items from the same browsed list with entry_id > max (entry_id) from the original list (same gids)
				        listNursery.listid,
				        listDataCheck.germplasm_id,
				        listDataCheck.check_type,
				        listDataCheck.entry_id,
				        listDataCheck.entry_code,
				        listDataCheck.seed_source,
				        listDataCheck.designation,
				        listDataCheck.group_name,
				        listDataCheck.duplicate_notes,
				        listDataCheck.crossing_date,
				        listDataCheck.notes
				      FROM
				        listdata_project listDataCheck
				        INNER JOIN
				        listnms listCheck ON listDataCheck.list_id = listCheck.listid
				        INNER JOIN
				        listnms listNursery ON listNursery.projectid = listCheck.projectid
				        inner join listdata_project listDataNursery on listDataNursery.list_id = listNursery.listid
				      WHERE
				        listCheck.listtype = 'CHECK'
				        AND listNursery.listtype = 'STUDY'
				        and listDataNursery.germplasm_id = listDataCheck.germplasm_id
				        AND (listDataNursery.check_type = '' OR listDataNursery.check_type = 0)
				        AND listDataCheck.check_type != 10170
				        AND listDataCheck.entry_id > (SELECT max(entry_id)
				                                      from listdata_project lmax
				                                      where lmax.list_id = listNursery.listid);

				    -- update entries without checks to Test Entry
				    UPDATE listdata_project
				    SET check_type = 10170
				    WHERE check_type = 0;

				    DROP TABLE IF EXISTS listdata_project_bkp;
				    DROP TABLE IF EXISTS listnms_bkp;

				    CREATE TABLE listnms_bkp (
				      listid       int(11)      NOT NULL AUTO_INCREMENT,
				      listname     varchar(50)  NOT NULL DEFAULT '-',
				      listdate     int(11)      NOT NULL DEFAULT '0',
				      listtype     varchar(10)  NOT NULL DEFAULT 'LST',
				      listuid      int(11)      NOT NULL DEFAULT '0',
				      listdesc     varchar(255) NOT NULL DEFAULT '-',
				      lhierarchy   int(11)               DEFAULT '0',
				      liststatus   int(11)               DEFAULT '1',
				      sdate        int(11)               DEFAULT NULL,
				      edate        int(11)               DEFAULT NULL,
				      listlocn     int(11)               DEFAULT NULL,
				      listref      int(11)               DEFAULT NULL,
				      projectid    int(11)               DEFAULT '0',
				      program_uuid varchar(36)           DEFAULT NULL,
				      notes        text,
				      PRIMARY KEY (listid)
				    );

				    CREATE TABLE listdata_project_bkp (
				      listdata_project_id int(11)      NOT NULL AUTO_INCREMENT,
				      list_id             int(11)      NOT NULL,
				      germplasm_id        int(11)      NOT NULL DEFAULT '0',
				      check_type          int(11)      NOT NULL DEFAULT '0',
				      entry_id            int(11)      NOT NULL DEFAULT '0',
				      entry_code          varchar(47)  NOT NULL DEFAULT '-',
				      seed_source         varchar(255) NOT NULL DEFAULT '-',
				      designation         varchar(255) NOT NULL DEFAULT '-',
				      group_name          varchar(255) NOT NULL DEFAULT '-',
				      duplicate_notes     varchar(600)          DEFAULT NULL,
				      crossing_date       int(11)               DEFAULT NULL,
				      notes               varchar(200)          DEFAULT NULL,
				      PRIMARY KEY (listdata_project_id)
				    );

				    SELECT COUNT(*)
				    INTO countInsert
				    FROM listdata_project
				    WHERE list_id IN (select l.listid
				                      from listnms l
				                      where l.listtype = 'CHECK' and l.listid = list_id);

				    IF countInsert > 0
				    THEN

				      INSERT INTO listdata_project_bkp
				        SELECT *
				        FROM listdata_project
				        WHERE list_id IN (select l.listid
				                          from listnms l
				                          where l.listtype = 'CHECK' and l.listid = list_id);
				    END IF;

				    SELECT COUNT(*)
				    INTO countInsertListnms
				    FROM listnms
				    WHERE listtype = 'CHECK';

				    IF countInsertListnms > 0
				    THEN

				      INSERT INTO listnms_bkp
				        SELECT *
				        FROM listnms
				        WHERE listtype = 'CHECK';
				    END IF;

				    DELETE FROM listdata_project
				    WHERE list_id IN (select l.listid
				                      from listnms l
				                      where l.listtype = 'CHECK' and l.listid = list_id);

				    DELETE FROM listnms
				    WHERE listtype = 'CHECK';
				    COMMIT;
				  END;

			  ]]>
		</sql>
		</changeSet>

		<changeSet id="v9.2.0-11" author="vanina">
			<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'migrate_check_list';
				</sqlCheck>
			</preConditions>
				<sql dbms="mysql" splitStatements="false">
					call migrate_check_list();
				</sql>
		</changeSet>

		<changeSet id="v9.2.0-12" author="vanina">
			<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'migrate_check_list';
				</sqlCheck>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				DROP PROCEDURE migrate_check_list;
			</sql>
		</changeSet>

		<changeSet id="v9.2.0-13" author="vanina">
			<preConditions onFail="MARK_RAN">
				<not>
				<sqlCheck expectedResult="0">
					SELECT
					COUNT(*)
					from cvtermprop
					where value = 'Nursery Condition' and cvterm_id in (SELECT cvtermprop_id
                                                    FROM cvterm cvt
                                                      INNER JOIN  (select * from cvtermprop) cvtp ON cvt.cvterm_id = cvtp.cvterm_id
                                                    WHERE cvt.cv_id = 1040 -- variable
                                                          AND cvtp.type_id = 1800 -- variable type
                                                          AND cvtp.value IN (
                                                      'Nursery Condition'
                                                      , 'Trial Condition'
                                                    )
                                                    group by cvt.cvterm_id
                                                    having count(1) = 2);
				</sqlCheck>
				</not>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				delete from cvtermprop
				where value = 'Nursery Condition' and cvterm_id in (SELECT cvtermprop_id
                                                    FROM cvterm cvt
                                                      INNER JOIN (select * from cvtermprop) cvtp ON cvt.cvterm_id = cvtp.cvterm_id
                                                    WHERE cvt.cv_id = 1040 -- variable
                                                          AND cvtp.type_id = 1800 -- variable type
                                                          AND cvtp.value IN (
                                                      'Nursery Condition'
                                                      , 'Trial Condition'
                                                    )
                                                    group by cvt.cvterm_id
                                                    having count(1) = 2);

			</sql>
		</changeSet>

		<changeSet id="v9.2.0-14" author="vanina">
			<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
						cvterm
					WHERE cvterm_id = 1802 AND name = 'Trial Condition';
				</sqlCheck>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				UPDATE cvterm SET name = 'Study Condition', definition = 'Observations made of conditions in a study' WHERE cvterm_id = 1802;
			</sql>
		</changeSet>

		<changeSet id="v9.2.0-15" author="vanina">
			<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
						cvtermprop
					WHERE value = 'Nursery Condition' AND type_id = 1800;
				</sqlCheck>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				UPDATE cvtermprop SET value = 'Trial Condition' WHERE value = 'Nursery Condition' AND type_id = 1800;
			</sql>
		</changeSet>

		<changeSet id="v9.2.0-16" author="vanina">
			<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
						projectprop
					WHERE type_id = 1803;
				</sqlCheck>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				UPDATE projectprop SET type_id=1802 WHERE type_id=1803;
			</sql>
		</changeSet>

		<changeSet id="v9.2.0-17" author="vanina">
			<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
						cvterm
					WHERE cvterm_id = 1803;
				</sqlCheck>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				DELETE FROM cvterm WHERE cvterm_id= 1803;
			</sql>
		</changeSet>

		<changeSet id="v9.2.0-18" author="vanina">
			<preConditions onFail="MARK_RAN">
				<not>
					<sqlCheck expectedResult="0">
						SELECT
						COUNT(*)
						FROM
							cvtermprop
						where value = 'Nursery Condition' or value = 'Trial Condition';
					</sqlCheck>
				</not>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				update cvtermprop set value = 'Study Condition' where value = 'Nursery Condition' or value = 'Trial Condition';
			</sql>
		</changeSet>

		<changeSet id="v9.2.0-19" author="clarysabel">
			<preConditions onFail="MARK_RAN">
				<not>
					<sqlCheck expectedResult="0">
						SELECT
						COUNT(*)
						FROM
							projectprop
						where alias != 'TRIAL_INSTANCE' and variable_id = 8170;
					</sqlCheck>
				</not>
			</preConditions>
			<sql dbms="mysql" splitStatements="false">
				update projectprop set alias = 'TRIAL_INSTANCE' where variable_id = 8170 and alias != 'TRIAL_INSTANCE';
			</sql>
		</changeSet>

		<changeSet author="vanina" id="v9.2.0-20">
		<preConditions onFail="MARK_RAN">
					<sqlCheck expectedResult="1">
						SELECT COUNT(*)
						FROM INFORMATION_SCHEMA.STATISTICS
						WHERE TABLE_SCHEMA = DATABASE()
						AND TABLE_NAME = 'project'
						AND INDEX_NAME = 'study_type_fk_idx';
					</sqlCheck>
			</preConditions>
			<sql dbms="mysql" splitStatements="true">
				ALTER TABLE project DROP INDEX study_type_fk_idx;
			</sql>
		</changeSet>
</databaseChangeLog>
