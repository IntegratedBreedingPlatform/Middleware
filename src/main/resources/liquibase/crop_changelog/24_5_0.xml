<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet author="mderamos" id="v24.5.0-1">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="template"/>
            </not>
        </preConditions>
        <comment>
            Create template table
        </comment>
        <createTable tableName="template">
            <column name="template_id" type="int" autoIncrement="true">
                <constraints primaryKey="true"/>
            </column>
            <column name="program_uuid" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="template_type" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="template_name" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="created_date" type="timestamp" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="int" defaultValue="0">
                <constraints nullable="false" />
            </column>
            <column name="modified_date" type="timestamp">
                <constraints nullable="true"/>
            </column>
            <column name="modified_by" type="int">
                <constraints nullable="true" />
            </column>
        </createTable>
    </changeSet>

    <changeSet author="mderamos" id="v24.5.0-2">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = 'template' AND CONSTRAINT_NAME='name_program_uuid_uc' and TABLE_SCHEMA = DATABASE();
            </sqlCheck>
        </preConditions>
        <comment>
            Create unique constraint for columns template_name and program_uuid for table template
        </comment>
        <addUniqueConstraint columnNames="template_name, program_uuid" constraintName="name_program_uuid_uc" tableName="template" />
    </changeSet>

    <changeSet author="mderamos" id="v24.5.0-3">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="template_details"/>
            </not>
        </preConditions>
        <comment>
            Create template details table
        </comment>
        <createTable tableName="template_details">
            <column name="template_details_id" type="int" autoIncrement="true">
                <constraints primaryKey="true"/>
            </column>
            <column name="variable_id" type="int">
                <constraints nullable="false" foreignKeyName="fk_cvterm_id" references="cvterm(cvterm_id)"/>
            </column>
            <column name="name" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="type" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="template_id" type="int">
                <constraints nullable="false" foreignKeyName="fk_template_id" references="template(template_id)"/>
            </column>
            <column name="created_date" type="timestamp" defaultValueComputed="CURRENT_TIMESTAMP">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="int" defaultValue="0">
                <constraints nullable="false" />
            </column>
            <column name="modified_date" type="timestamp">
                <constraints nullable="true"/>
            </column>
            <column name="modified_by" type="int">
                <constraints nullable="true" />
            </column>
        </createTable>
    </changeSet>

    <changeSet author="mderamos" id="v24.5.0-4">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = 'template_details' AND CONSTRAINT_NAME='variable_id_template_id_uc' and TABLE_SCHEMA = DATABASE();
            </sqlCheck>
        </preConditions>
        <comment>
            Create unique constraint for columns variable_id and template_id for table template_details
        </comment>
        <addUniqueConstraint columnNames="variable_id, template_id" constraintName="variable_id_template_id_uc" tableName="template_details" />
    </changeSet>
	
	
	<changeSet id="v24.5.0-1" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Inventory" AND cv_id = 1011;
            </sqlCheck>
        </preConditions>
        <comment>Add cvterm class Inventory</comment>
        <sql dbms="mysql" splitStatements="true">
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1011, 'Inventory', 'Inventory', null, 0, 0);
        </sql>
	</changeSet>	
	
	
	<changeSet id="v24.5.0-2" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Packing status" AND cv_id = 1010;
            </sqlCheck>
        </preConditions>
        <comment>Add cvterm Packing Status property</comment>
        <sql dbms="mysql" splitStatements="true">
	        INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1010, 'Packing status', 'Packing status of the plot in the seed prep workflow.', null, 0, 0);
			
			set @propertyId = (select cvterm_id from cvterm where name = 'Packing status' AND cv_id = 1010);
			set @class = (SELECT cvterm_id FROM cvterm WHERE name = "Inventory" AND cv_id = 1011);	
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1225, @propertyId, @class );
					
        </sql>
    </changeSet>				
	    
    <changeSet id="v24.5.0-3" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Described" AND cv_id = 1020;
            </sqlCheck>
        </preConditions>
        <comment>Add method Described</comment>
        <sql dbms="mysql" splitStatements="true">
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1020, 'Described', 'Described', null, 0, 0);
        </sql>
    </changeSet>

    <changeSet id="v24.5.0-4" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Packing status categories" AND cv_id = 1030;
            </sqlCheck>
        </preConditions>
        <comment>Add scale Packing status categories</comment>
        <sql dbms="mysql" splitStatements="true">
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1030, 'Packing status categories', 'Packing status categories', null, 0, 0);
        </sql>
    </changeSet>   
	
		
	<changeSet id="v24.5.0-5" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Packing_Status" and cv_id = 1040 ;
            </sqlCheck>
        </preConditions>
        <comment>Add variable for Packing_Status</comment>
        <sql dbms="mysql" splitStatements="true">
            set @methodID = (select cvterm_id from cvterm where name = 'Described' AND cv_id = 1020);
            set @scaleId = (select cvterm_id from cvterm where name = 'Packing status categories' AND cv_id = 1030);
			set @propertyId = (select cvterm_id from cvterm where name = 'Packing status' AND cv_id = 1010);

            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1040, 'Packing_Status', 'Packing status of the plot in the seed prep workflow.', null, 0, 0);
           
            set @variableId = (select cvterm_id from cvterm where name = 'Packing_Status' AND cv_id = 1040);
			set @propertyId = (select cvterm_id from cvterm where name = 'Packing status' AND cv_id = 1010);
		
            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1200, @variableId, @propertyId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1210, @variableId, @methodId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1220, @variableId, @scaleId);
			
            INSERT INTO cvtermprop(cvterm_id, type_id, value, rank)
            VALUES (@variableId, 1800, 'Trait', 0);
			
			INSERT INTO cvtermprop (cvterm_id, type_id, value, rank) 
			VALUES (@variableId, 8048, (SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%dT%T.000Z')), 0);
	
        </sql>
    </changeSet>	
	
	<changeSet id="v24.5.0-6" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                select count(*) from cv where name = "Packing_Status" ;
            </sqlCheck>
        </preConditions>
        <comment>Add categories for variable Packing_Status</comment>
        <sql dbms="mysql" splitStatements="true">
			set @variableId = (select cvterm_id from cvterm where name = "Packing_Status" AND cv_id = 1040);
			set @scaleId = (select cvterm_id from cvterm where name = "Packing status categories" AND cv_id = 1030);
			
			INSERT INTO cv ( name, definition)
			VALUES (@variableId, "Packing_Status");
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1105, @scaleId, 1130);
			
			set @cvId = (select max(cv_id) from cv where definition = "Packing_Status");
			
			INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (@cvId, '1', '1=packed', null, 0, 0);
			
			set @catvalue=(select max(cvterm_id) from cvterm);
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1190, @scaleId, @catvalue);

			INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (@cvId, 2, '2=skipped', null, 0, 0);
			set @catvalue=(select max(cvterm_id) from cvterm);
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1190, @scaleId, @catvalue);

        </sql>
    </changeSet>	
	
	 <changeSet id="v24.5.0-7" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Plot Number" AND cv_id = 1010;
            </sqlCheck>
        </preConditions>
        <comment>Add property Plot Number </comment>
        <sql dbms="mysql" splitStatements="true">
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1010, 'Plot Number', 'Plot Number', null, 0, 0);
        </sql>
    </changeSet>				
				
    <changeSet id="v24.5.0-8" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Assigned Passport Descriptor" AND cv_id = 1020;
            </sqlCheck>
        </preConditions>
        <comment>Add method Assigned Passport Descriptor</comment>
        <sql dbms="mysql" splitStatements="true">
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1020, 'Assigned Passport Descriptor', 'Standard method for assigned passport descriptor', null, 0, 0);
        </sql>
    </changeSet>

    <changeSet id="v24.5.0-9" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Text" AND cv_id = 1030;
            </sqlCheck>
        </preConditions>
        <comment>Add scale Text</comment>
        <sql dbms="mysql" splitStatements="true">
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1030, 'Text', 'Text', null, 0, 0);
        </sql>
    </changeSet>   
	
	<changeSet id="v24.5.0-10" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "PLOT_NUMBER_AP_text" and cv_id = 1040 ;
            </sqlCheck>
        </preConditions>
        <comment>Add variable PLOT_NUMBER_AP_text</comment>
        <sql dbms="mysql" splitStatements="true">
            set @methodID = (select cvterm_id from cvterm where name = 'Assigned Passport Descriptor' AND cv_id = 1020);
            set @scaleId = (select cvterm_id from cvterm where name = 'Text' AND cv_id = 1030);
			set @propertyId = (select cvterm_id from cvterm where name = 'Plot Number' AND cv_id = 1010);
			set @class = (SELECT cvterm_id FROM cvterm WHERE name = "Passport" AND cv_id = 1011);
			
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1040, 'PLOT_NUMBER_AP_text', 'Plot Number', null, 0, 0);

            set @variableId = (select cvterm_id from cvterm where name = 'PLOT_NUMBER_AP_text' AND cv_id = 1040);
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1225, @propertyId, @class );
			
            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1200, @variableId, @propertyId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1210, @variableId, @methodId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1220, @variableId, @scaleId);

            INSERT INTO cvtermprop(cvterm_id, type_id, value, rank)
            VALUES (@variableId, 1800, 'Germplasm Passport', 0);
			
			INSERT INTO cvtermprop (cvterm_id, type_id, value, rank) 
			VALUES (@variableId, 8048, (SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%dT%T.000Z')), 0);

        </sql>
    </changeSet>	
	
	
	<changeSet id="v24.5.0-11" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Trial Instance Number" AND cv_id = 1010;
            </sqlCheck>
        </preConditions>
        <comment>Add property Trial Instance Number </comment>
        <sql dbms="mysql" splitStatements="true">
			
			set @class = (SELECT cvterm_id FROM cvterm WHERE name = "Passport" AND cv_id = 1011);
			
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1010, 'Trial Instance Number', 'Trial Instance Number', null, 0, 0);
			
			set @propertyId = (select cvterm_id from cvterm where name = 'Trial Instance Number' AND cv_id = 1010);
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1225, @propertyId,@class );
	    </sql>
    </changeSet>				
    
	<changeSet id="v24.5.0-12" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "INSTANCE_NUMBER_AP_text" and cv_id = 1040 ;
            </sqlCheck>
        </preConditions>
        <comment>Add variable INSTANCE_NUMBER_AP_text</comment>
        <sql dbms="mysql" splitStatements="true">
            set @methodID = (select cvterm_id from cvterm where name = 'Assigned Passport Descriptor' AND cv_id = 1020);
            set @scaleId = (select cvterm_id from cvterm where name = 'Text' AND cv_id = 1030);
			set @propertyId = (select cvterm_id from cvterm where name = 'Trial Instance Number' AND cv_id = 1010);
			
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1040, 'INSTANCE_NUMBER_AP_text', 'Trial Instance Number', null, 0, 0);

            set @variableId = (select cvterm_id from cvterm where name = 'INSTANCE_NUMBER_AP_text' AND cv_id = 1040);
						

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1200, @variableId, @propertyId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1210, @variableId, @methodId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1220, @variableId, @scaleId);

            INSERT INTO cvtermprop(cvterm_id, type_id, value, rank)
            VALUES (@variableId, 1800, 'Germplasm Passport', 0);
			
			INSERT INTO cvtermprop (cvterm_id, type_id, value, rank) 
			VALUES (@variableId, 8048, (SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%dT%T.000Z')), 0);

        </sql>
    </changeSet>	
	
	<changeSet id="v24.5.0-13" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Replication Number" AND cv_id = 1010;
            </sqlCheck>
        </preConditions>
        <comment>Add property Replication Number </comment>
        <sql dbms="mysql" splitStatements="true">
			set @class = ( SELECT cvterm_id FROM cvterm WHERE name = "Passport" AND cv_id = 1011);
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1010, 'Replication Number', 'Replication Number', null, 0, 0);
			
			set @propertyId = (select cvterm_id from cvterm where name = 'Replication Number' AND cv_id = 1010);
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1225, @propertyId,@class );
			
        </sql>
    </changeSet>				
    
  
	<changeSet id="v24.5.0-14" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "REP_NUMBER_AP_text" and cv_id = 1040 ;
            </sqlCheck>
        </preConditions>
        <comment>Add variable REP_NUMBER_AP_text</comment>
        <sql dbms="mysql" splitStatements="true">
            set @methodID = (select cvterm_id from cvterm where name = 'Assigned Passport Descriptor' AND cv_id = 1020);
            set @scaleId = (select cvterm_id from cvterm where name = 'Text' AND cv_id = 1030);
			set @propertyId = (select cvterm_id from cvterm where name = 'Replication Number' AND cv_id = 1010);

			
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1040, 'REP_NUMBER_AP_text', 'Replication Number', null, 0, 0);

            set @variableId = (select cvterm_id from cvterm where name = 'REP_NUMBER_AP_text' AND cv_id = 1040);
			
            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1200, @variableId, @propertyId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1210, @variableId, @methodId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1220, @variableId, @scaleId);

            INSERT INTO cvtermprop(cvterm_id, type_id, value, rank)
            VALUES (@variableId, 1800, 'Germplasm Passport', 0);
			
			INSERT INTO cvtermprop (cvterm_id, type_id, value, rank) 
			VALUES (@variableId, 8048, (SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%dT%T.000Z')), 0);

        </sql>
    </changeSet>	
	
    <changeSet id="v24.5.0-15" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "Plant Number" AND cv_id = 1010;
            </sqlCheck>
        </preConditions>
        <comment>Add property Plant Number </comment>
        <sql dbms="mysql" splitStatements="true">
			set @class = ( SELECT cvterm_id FROM cvterm WHERE name = "Passport" AND cv_id = 1011);
			
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1010, 'Plant Number', 'Plant Number', null, 0, 0);
									
			set @propertyId = (select cvterm_id from cvterm where name = 'Plant Number' AND cv_id = 1010);
			
			INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1225, @propertyId,@class );
			
        </sql>
    </changeSet>				
    
  
	<changeSet id="v24.5.0-16" author="rowena">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT count(*) FROM cvterm WHERE name = "PLANT_NUMBER_AP_text" and cv_id = 1040 ;
            </sqlCheck>
        </preConditions>
        <comment>Add variable PLANT_NUMBER_AP_text</comment>
        <sql dbms="mysql" splitStatements="true">
            set @methodID = (select cvterm_id from cvterm where name = 'Assigned Passport Descriptor' AND cv_id = 1020);
            set @scaleId = (select cvterm_id from cvterm where name = 'Text' AND cv_id = 1030);
			set @propertyId = (select cvterm_id from cvterm where name = 'Plant Number' AND cv_id = 1010);
			
            INSERT INTO cvterm (cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
            VALUES (1040, 'PLANT_NUMBER_AP_text', 'Plant Number', null, 0, 0);

            set @variableId = (select cvterm_id from cvterm where name = 'PLANT_NUMBER_AP_text' AND cv_id = 1040);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1200, @variableId, @propertyId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1210, @variableId, @methodId);

            INSERT INTO cvterm_relationship(type_id, subject_id, object_id)
            VALUES (1220, @variableId, @scaleId);

            INSERT INTO cvtermprop(cvterm_id, type_id, value, rank)
            VALUES (@variableId, 1800, 'Germplasm Passport', 0);
			
			INSERT INTO cvtermprop (cvterm_id, type_id, value, rank) 
			VALUES (@variableId, 8048, (SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%Y-%m-%dT%T.000Z')), 0);

        </sql>
    </changeSet>	
	
	  
	<changeSet id="v24.5.1-1" author="rowena">
        <preConditions onFail="MARK_RAN">
			<and>
			<sqlCheck expectedResult="1">
				SELECT COUNT(1) > 0 FROM Listnms where listdate &lt; 20230000;
			</sqlCheck>
				<!-- Check if dataset check_listentry_table was created -->
			<sqlCheck expectedResult="0">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_listentry_sequence';
				</sqlCheck>
			</and>

        </preConditions>
		<comment>
			Create stored procedure to correct any entryno that are not in sequence
		</comment>
		<sql dbms="mysql" splitStatements="false">
			<![CDATA[
				CREATE PROCEDURE check_listentry_sequence()
				BEGIN
				
				DROP TABLE IF EXISTS list_seq_table;

				CREATE  TABLE list_seq_table (
					seq INT(11) NOT NULL AUTO_INCREMENT,
					entryid INT(11) DEFAULT NULL,
					listid INT(11) DEFAULT NULL,
					lrecid INT(11) DEFAULT NULL,
					PRIMARY KEY (seq),
					KEY edx (entryid),
					KEY ldx (lrecid)
				) ENGINE=INNODB;


				INSERT INTO list_seq_table ( entryid, listid, lrecid )
				SELECT entryid, l.listid, lrecid FROM listdata l , listnms n where l.listid = n.listid ORDER BY listid, entryid ;

				UPDATE listdata l,
					(SELECT lists.listid, val, ((((max_seq - lists.seq)-(max_seq-min_seq))*(-1))+1)  AS list_seq ,  cnt, lrecid FROM 
					(SELECT listid , MAX(seq) AS max_seq,MIN(seq) min_seq,MAX(entryid) max_val,MIN(entryid) AS min_val, COUNT(*) AS cnt
					FROM list_seq_table GROUP BY listid )  AS minmaxlist
				INNER JOIN 
				(SELECT listid,seq, entryid AS val, lrecid  FROM list_seq_table) AS lists
					ON lists.listid = minmaxlist.listid
					ORDER BY seq
				) AS ordered_list
				SET l.entryid = ordered_list.list_seq
					WHERE l.listid = ordered_list.listid AND l.lrecid = ordered_list.lrecid AND l.entryid<>list_seq;
					
				DROP TABLE IF EXISTS list_seq_table;
				
				END;
				]]>
		</sql>
    </changeSet>
	
	<changeSet  id="v24.5.1-2" author="rowena">
		<preConditions onFail="MARK_RAN">
			<!-- Check if dataset check_listentry_table was created -->
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_listentry_sequence';
				</sqlCheck>
			
        </preConditions>
		<comment>
			Call stored procedure check_listentry_sequence;
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CALL check_listentry_sequence();
		</sql>
	</changeSet>

	<changeSet  id="v24.5.1-3" author="rowena">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'check_listentry_sequence';
			</sqlCheck>
		</preConditions>
		<comment>Drop procedure check_listentry_sequence</comment>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE check_listentry_sequence;
		</sql>
	</changeSet>	
	


	<changeSet id="v24.5.2-1" author="rowena">
        <preConditions onFail="MARK_RAN">
			<and>
			<!-- check if there studies made before 2023 -->
			<sqlCheck expectedResult="1">
				SELECT COUNT(*) FROM workbench.workbench_project p
						INNER JOIN workbench.workbench_crop c
						WHERE c.crop_name = p.crop_type
						AND c.db_name = DATABASE()
						AND YEAR(p.start_date)&lt; 20230000;
			</sqlCheck>
			<!-- Check if procedure check_stockentry_sequence table was created -->
			<sqlCheck expectedResult="0">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_stockentry_sequence';
				</sqlCheck>
			</and>

        </preConditions>
		<comment>
			Create stored procedure to correct any entryno (uniquename) that are not in sequence
		</comment>
		<sql dbms="mysql" splitStatements="false">
			<![CDATA[
				CREATE PROCEDURE check_stockentry_sequence()
				BEGIN
				
				DROP TABLE IF EXISTS stock_seq_table;
					
				CREATE TABLE stock_seq_table(
					seq INT(11) NOT NULL AUTO_INCREMENT,
					entryid INT(11) DEFAULT NULL,
					project_id INT(11) DEFAULT NULL,
					stock_id INT(11) DEFAULT NULL,
					gid INT(11) DEFAULT NULL,
					PRIMARY KEY (`seq`),
					KEY edx (entryid),
					KEY ldx (stock_id)
				) ENGINE=INNODB;

				INSERT INTO stock_seq_table ( entryid, project_id, stock_id, GID )
						SELECT CAST(uniquename AS UNSIGNED) AS entryid, project_id, CAST(uniquename AS UNSIGNED), dbxref_id FROM stock ORDER BY project_id, entryid;

				UPDATE stock s,
					(SELECT stocklist.project_id, val, ((((max_seq - stocklist.seq)-(max_seq-min_seq))*(-1))+1)  AS list_seq ,  cnt, stock_id FROM 
					(SELECT project_id , MAX(seq) AS max_seq,MIN(seq) min_seq,MAX(entryid) max_val,MIN(entryid) AS min_val, COUNT(*) AS cnt
				FROM stock_seq_table GROUP BY project_id )  AS minmaxlist
				INNER JOIN 
				(SELECT project_id,seq, entryid AS val, stock_id  FROM stock_seq_table) AS stocklist
					ON stocklist.project_id = minmaxlist.project_id
				ORDER BY seq
				) AS Q
				SET s.uniquename = Q.list_seq
				WHERE s.project_id = Q.project_id AND s.stock_id = Q.stock_id AND CAST(s.uniquename AS UNSIGNED)<>list_seq;	
		
				DROP TABLE IF EXISTS stock_seq_table;
				
				END;
			]]>
			
		</sql>
    </changeSet>
	
	<changeSet  id="v24.5.2-2" author="rowena">
		<preConditions onFail="MARK_RAN">
			<!-- Check if dataset check_listentry_table was created -->
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_stockentry_sequence';
				</sqlCheck>
			
        </preConditions>
		<comment>
			Call stored procedure check_stockentry_sequence;
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CALL check_stockentry_sequence();
		</sql>
	</changeSet>

	<changeSet  id="v24.5.2-3" author="rowena">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'check_stockentry_sequence';
			</sqlCheck>
		</preConditions>
		<comment>Drop procedure check_stockentry_sequence</comment>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE check_stockentry_sequence;
		</sql>
	</changeSet>	
	
</databaseChangeLog>
