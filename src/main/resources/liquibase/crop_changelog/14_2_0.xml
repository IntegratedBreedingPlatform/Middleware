<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

   <changeSet author="darla" id="v14.2.0-1">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
					FROM nd_geolocation g
					INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
					WHERE e.type_id = 1020 AND e.observation_unit_no IS NULL;
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Save Trial Instance Number to ND_EXPERIMENT.observation_unit_no field
		</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE nd_geolocation g
        	INNER join nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        	SET e.observation_unit_no = g.description
        	WHERE e.type_id = 1020 AND e.observation_unit_no IS NULL;
		</sql>
	</changeSet>


	<changeSet author="darla" id="v14.2.0-2">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
        			FROM nd_experiment e
        			INNER JOIN nd_experiment env ON e.nd_geolocation_id = env.nd_geolocation_id AND env.type_id = 1020
        			WHERE e.type_id in (1155, 1170) AND e.parent_id is null;
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Update Environment experiments as parent of Plot and Means Experiments
		</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE nd_experiment e
        	INNER JOIN nd_experiment env ON e.nd_geolocation_id = env.nd_geolocation_id AND env.type_id = 1020
        	SET e.parent_id = env.nd_experiment_id
        	WHERE e.type_id in (1155, 1170) AND e.parent_id is null;
		</sql>
	</changeSet>


	<changeSet author="darla" id="v14.2.0-3">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
        			FROM nd_geolocation g
        			INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        			WHERE e.type_id = 1020 and g.latitude IS NOT NULL
					AND NOT EXISTS (
						SELECT 1 FROM nd_experimentprop xp
						WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8191);
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Move Latitude data to ND_EXPERIMENTPROP table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO `nd_experimentprop`(`nd_experiment_id`,`type_id`,`value`,`rank`)
        	SELECT e.nd_experiment_id, 8191, g.latitude, 1
        	FROM nd_geolocation g
        	INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        	WHERE e.type_id = 1020 and g.latitude IS NOT NULL
			AND NOT EXISTS (
				SELECT 1 FROM nd_experimentprop xp
				WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8191);
		</sql>
	</changeSet>

	<changeSet author="darla" id="v14.2.0-4">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
        			FROM nd_geolocation g
        			INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        			WHERE e.type_id = 1020 and g.longitude IS NOT NULL
					AND NOT EXISTS (
						SELECT 1 FROM nd_experimentprop xp
						WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8192);
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Move Longitude data to ND_EXPERIMENTPROP table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO `nd_experimentprop`(`nd_experiment_id`,`type_id`,`value`,`rank`)
        	SELECT e.nd_experiment_id, 8192, g.longitude, 2
        	FROM nd_geolocation g
        	INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        	WHERE e.type_id = 1020 and g.longitude IS NOT NULL
			AND NOT EXISTS (
				SELECT 1 FROM nd_experimentprop xp
				WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8192);
		</sql>
	</changeSet>

	<changeSet author="darla" id="v14.2.0-5">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
        			FROM nd_geolocation g
        			INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        			WHERE e.type_id = 1020 and g.geodetic_datum IS NOT NULL
					AND NOT EXISTS (
						SELECT 1 FROM nd_experimentprop xp
						WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8193);
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Move Geodetic Datum to ND_EXPERIMENTPROP table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO `nd_experimentprop`(`nd_experiment_id`,`type_id`,`value`,`rank`)
        	SELECT e.nd_experiment_id, 8193, g.geodetic_datum, 3
        	FROM nd_geolocation g
        	INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        	WHERE e.type_id = 1020 and g.geodetic_datum IS NOT NULL
			AND NOT EXISTS (
				SELECT 1 FROM nd_experimentprop xp
				WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8193);
		</sql>
	</changeSet>

	<changeSet author="darla" id="v14.2.0-6">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
        			FROM nd_geolocation g
        			INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        			WHERE e.type_id = 1020 and g.altitude IS NOT NULL
					AND NOT EXISTS (
						SELECT 1 FROM nd_experimentprop xp
						WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8194);
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Move Altitude Data to ND_EXPERIMENTPROP table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO `nd_experimentprop`(`nd_experiment_id`,`type_id`,`value`,`rank`)
        	SELECT e.nd_experiment_id, 8194, g.altitude, 4
        	FROM nd_geolocation g
        	INNER JOIN nd_experiment e ON e.nd_geolocation_id = g.nd_geolocation_id
        	WHERE e.type_id = 1020 and g.altitude IS NOT NULL
			AND NOT EXISTS (
				SELECT 1 FROM nd_experimentprop xp
				WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = 8194);
		</sql>
	</changeSet>

	<changeSet author="darla" id="v14.2.0-7">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(1)
					FROM nd_geolocationprop gp
        			INNER JOIN nd_experiment e ON e.nd_geolocation_id = gp.nd_geolocation_id
        			WHERE e.type_id = 1020
        			AND NOT EXISTS (
						SELECT 1 FROM nd_experimentprop xp
						WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = gp.type_id);
				</sqlCheck>
			</not>
		</preConditions>
		<comment> Move data from ND_GEOLOCATIONPROP to ND_EXPERIMENTPROP table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO `nd_experimentprop`(`nd_experiment_id`,`type_id`,`value`,`rank`)
        	SELECT e.nd_experiment_id, gp.type_id, gp.value, gp.rank
			FROM nd_geolocationprop gp
			INNER JOIN nd_experiment e ON e.nd_geolocation_id = gp.nd_geolocation_id
			WHERE e.type_id = 1020
			AND NOT EXISTS (
				SELECT 1 FROM nd_experimentprop xp
				WHERE xp.nd_experiment_id = e.nd_experiment_id and xp.type_id = gp.type_id);
		</sql>
	</changeSet>


	<changeSet author="darla" id="v14.2.0-8">
        <preConditions onFail="MARK_RAN">
			<foreignKeyConstraintExists foreignKeyName="nd_experiment_fk1"></foreignKeyConstraintExists>
		</preConditions>
    	<dropForeignKeyConstraint baseTableName="nd_experiment" constraintName="nd_experiment_fk1"/>
		<dropNotNullConstraint tableName="nd_experiment" columnName="nd_geolocation_id" columnDataType="INT"/>
	</changeSet>


	<changeSet author="darla" id="v14.2.0-9">
		<preConditions onFail="MARK_RAN">
			<not>
				<columnExists tableName="nd_experiment" columnName="nd_geolocation_id_bkp"/>
			</not>
		</preConditions>
		<comment>
			Copy nd_geolocation_id values of ND_EXPERIMENT table into backup field
		</comment>
		<addColumn tableName="nd_experiment">
			<column name="nd_geolocation_id_bkp" type="INT" afterColumn="nd_geolocation_id">
				<constraints nullable="true"/>
			</column>
		</addColumn>
		<sql dbms="mysql" splitStatements="true">
			UPDATE nd_experiment
			   SET nd_geolocation_id_bkp = nd_geolocation_id;

			UPDATE nd_experiment
			   SET nd_geolocation_id = NULL;
		</sql>
	</changeSet>


	<changeSet author="darla" id="v14.2.0-10">
		<preConditions onFail="MARK_RAN">
			<not>
				<tableExists tableName="nd_geolocationprop_bkp" />
			</not>
		</preConditions>
		<comment>
			Temporary for testing: Backup then delete contents of ND_GEOLOCATIONPROP table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CREATE TABLE `nd_geolocationprop_bkp` (
  				`nd_geolocationprop_id` int(11) NOT NULL AUTO_INCREMENT,
  				`nd_geolocation_id` int(11) NOT NULL,
  				`type_id` int(11) NOT NULL,
  				`value` varchar(255) DEFAULT NULL,
  				`rank` int(11) NOT NULL DEFAULT '0',
  				PRIMARY KEY (`nd_geolocationprop_id`),
  				UNIQUE KEY `nd_geolocationprop_bkp_idx1` (`nd_geolocation_id`,`type_id`,`rank`),
  				KEY `nd_geolocationprop_bkp_idx2` (`type_id`),
  				CONSTRAINT `nd_geolocationprop_bkp_fk2` FOREIGN KEY (`type_id`) REFERENCES `cvterm` (`cvterm_id`) ON DELETE CASCADE
			);

			INSERT INTO nd_geolocationprop_bkp
			SELECT * FROM nd_geolocationprop;

			DELETE FROM nd_geolocationprop;
		</sql>
	</changeSet>


	<changeSet author="darla" id="v14.2.0-11">
		<preConditions onFail="MARK_RAN">
			<not>
				<tableExists tableName="nd_geolocation_bkp" />
			</not>
		</preConditions>
		<comment>
			Temporary for testing: Backup then delete contents of ND_GEOLOCATION table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CREATE TABLE `nd_geolocation_bkp` (
				`nd_geolocation_id` int(11) NOT NULL AUTO_INCREMENT,
  				`description` varchar(255) DEFAULT NULL,
  				`latitude` float DEFAULT NULL,
  				`longitude` float DEFAULT NULL,
  				`geodetic_datum` varchar(32) DEFAULT NULL,
  				`altitude` float DEFAULT NULL,
  				PRIMARY KEY (`nd_geolocation_id`)
			);

			INSERT INTO nd_geolocation_bkp
			SELECT * FROM nd_geolocation;

			DELETE FROM nd_geolocation;
		</sql>
	</changeSet>

</databaseChangeLog>
