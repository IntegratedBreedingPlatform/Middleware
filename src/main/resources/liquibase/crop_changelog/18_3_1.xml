<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

	<changeSet author="corina" id="v18.3.1-1">
        <preConditions onFail="MARK_RAN">
			<and>
				<sqlCheck expectedResult="1">
					SELECT COUNT(*) FROM location WHERE labbr='DEU' and locid=82;
				</sqlCheck>
				<sqlCheck expectedResult="0">
					SELECT COUNT(*) FROM location WHERE labbr='FRG';
				</sqlCheck>
			</and>
        </preConditions>
        <comment> Rename location abbreviation for West Germany (locid 82) to FRG. IBP-4308 </comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE location SET labbr='FRG' WHERE labbr='DEU' AND locid=82;
		</sql>
	</changeSet>

	<changeSet author="corina" id="v18.3.1-2">
        <preConditions onFail="MARK_RAN">
			<and>
				<sqlCheck expectedResult="1">
					SELECT COUNT(*) FROM location WHERE labbr='ATF' and locid=275;
				</sqlCheck>
				<sqlCheck expectedResult="0">
					SELECT COUNT(*) FROM location WHERE labbr='TAAF';
				</sqlCheck>
			</and>
        </preConditions>
        <comment> Rename location abbreviation for French Southern Territories (locid 275) to TAAF. IBP-4308 </comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE location SET labbr='TAAF',lname='French Southern and Antarctic Lands' WHERE labbr='ATF' AND locid=275;
		</sql>
	</changeSet>

	<changeSet author="corina" id="v18.3.1-3">
        <preConditions onFail="MARK_RAN">
			<and>
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) FROM location WHERE labbr='UMI' and locid=282;
            </sqlCheck>
			<sqlCheck expectedResult="0">
					SELECT COUNT(*) FROM location WHERE labbr='UMIP';
			</sqlCheck>
			</and>
        </preConditions>
        <comment> Rename location abbreviation for United States Minor Outlying Islands (locid 282) to UMIP. IBP-4308 </comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE location SET labbr='UMIP' WHERE labbr='UMI' AND locid=282;
		</sql>
	</changeSet>
	
	<changeSet author="corina" id="v18.3.1-4">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) > 0 FROM location WHERE labbr IS NULL;
            </sqlCheck>
        </preConditions>
        <comment> Set labbr=L+locid for null labbr</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE location SET location.labbr = (SELECT CONCAT('L',CONVERT(`locid`,CHAR))) WHERE (((location.labbr) IS NULL));
		</sql>
	</changeSet>
	
	<changeSet author="corina" id="v18.3.1-5">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*) > 0 FROM location WHERE labbr='-';
            </sqlCheck>
        </preConditions>
        <comment> Set labbr=L+locid where labbr is a dash</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE location SET location.labbr = (SELECT CONCAT('L',CONVERT(`locid`,CHAR))) WHERE (((location.labbr) = '-'));
		</sql>
	</changeSet>
	
	<changeSet author="corina" id="v18.3.1-6">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'resolveLocationMultipleDuplicates';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE resolveLocationMultipleDuplicates;
		</sql>
	</changeSet>

	<changeSet author="corina" id="v18.3.1-7">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'resolveLocationMultipleDuplicates';
			</sqlCheck>
		</preConditions>
		<comment>
			Create SP that resolves duplication in location.LABBR
		</comment>
		<sql dbms="mysql" splitStatements="false">
			CREATE PROCEDURE resolveLocationMultipleDuplicates()
			BEGIN
			
			DECLARE loopcount INT;
			
			SET @s = CONCAT('SELECT COUNT(l1.labbr) INTO @loopcount FROM location l1 
			GROUP BY l1.labbr HAVING COUNT(l1.labbr)>1
			ORDER BY COUNT(l1.labbr) DESC 
			LIMIT 1;');

			PREPARE stmt FROM @s;
			EXECUTE stmt;	
			DEALLOCATE PREPARE stmt;

			WHILE @loopcount > 1 DO

			SET @s = CONCAT('DROP TABLE IF EXISTS dupTable;');

			PREPARE stmt FROM @s;
			EXECUTE stmt;	
			DEALLOCATE PREPARE stmt;

			SET @s = CONCAT('CREATE TEMPORARY TABLE dupTable AS
			SELECT l1.cntryid cntryID2,l1.locid locid2,  l1.labbr labbr2, 
			l2.cntryid,l2.labbr,l2.locid 
			FROM location l1 
			LEFT JOIN location l2
			ON l1.labbr =l2.labbr AND l2.locid<>l1.locid
			WHERE l2.labbr IS NOT NULL
			GROUP BY l1.labbr;');
			
			PREPARE stmt FROM @s;
			EXECUTE stmt;	
			DEALLOCATE PREPARE stmt;

			SET @s = CONCAT('UPDATE location l, dupTable d 
			SET l.labbr = CONCAT(l.labbr,@loopcount) WHERE l.locid = d.locid2;');
			PREPARE stmt FROM @s;
			EXECUTE stmt;	
			DEALLOCATE PREPARE stmt;

			SET @s = CONCAT('DROP TABLE IF EXISTS dupTable;');
			PREPARE stmt FROM @s;
			EXECUTE stmt;	
			DEALLOCATE PREPARE stmt;

			SET @s = CONCAT('
			SET @loopcount = @loopcount-1;');
			PREPARE stmt FROM @s;
			EXECUTE stmt;	
			DEALLOCATE PREPARE stmt;

			END WHILE;

			END;
		</sql>
	</changeSet>

	<changeSet author="corina" id="v18.3.1-8">
		<preConditions onFail="MARK_RAN">
			<and>
				<sqlCheck expectedResult="1">
					SELECT COUNT(l1.labbr) > 0 FROM location l1 GROUP BY l1.labbr HAVING COUNT(l1.labbr)>1;
				</sqlCheck>
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'resolveLocationMultipleDuplicates';
				</sqlCheck>
			</and>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			call resolveLocationMultipleDuplicates();
		</sql>
	</changeSet>

	<changeSet author="corina" id="v18.3.1-9">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'resolveLocationMultipleDuplicates';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE resolveLocationMultipleDuplicates;
		</sql>
	</changeSet>
	
	<changeSet author="mderamos" id="v18.3.1-10">
        <preConditions onFail="MARK_RAN">
			<indexExists tableName="location" indexName="labbr_UNIQUE"/>
		</preConditions>
		<comment>Remove location abbr unique index if already existing</comment>
		<dropIndex tableName="location" indexName="labbr_UNIQUE"/>
	</changeSet>

	<changeSet author="mderamos" id="v18.3.1-11">
		<preConditions onFail="CONTINUE">
			<and>
				<not><indexExists tableName="location" indexName="uk_location_labbr"/></not>
				<sqlCheck expectedResult="0">select count(*) from (SELECT count(*) from location where labbr is not null group by labbr having count(*) > 1) a </sqlCheck>
			</and>
		</preConditions>
		<comment>Adding unique constraint to labbr column of location table </comment>
	    <addUniqueConstraint columnNames="labbr" constraintName="uk_location_labbr" tableName="location"/>
	</changeSet>

	
</databaseChangeLog>
