<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

	<changeSet author="gelli" id="v15.1.0-1">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				SELECT
				if(DATA_TYPE = 'varchar' and CHARACTER_MAXIMUM_LENGTH = 255, 1, 0) as new_datatype
				FROM  INFORMATION_SCHEMA.COLUMNS
				WHERE table_name='key_sequence_register'
				AND column_name='key_prefix'
				AND TABLE_SCHEMA = database();
			</sqlCheck>
		</preConditions>
		<comment>Alter key_prefix data type from varchar(50) to varchar(255)</comment>
		<modifyDataType tableName="key_sequence_register" columnName="key_prefix" newDataType="varchar(255)"/>
	</changeSet>

	<changeSet author="darla" id="v15.1.0-2">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(1) > 0 FROM project p
				WHERE EXISTS ( SELECT 1 FROM nd_experiment e
								INNER JOIN stock s ON s.stock_id = e.stock_id
								WHERE e.project_id = p.project_id
								GROUP BY e.project_id, s.uniquename
								HAVING COUNT(DISTINCT s.stock_id) > 1
							);
			</sqlCheck>
		</preConditions>
		<comment>Update datasets whose stock entries are not unique per entry number</comment>
		<sql dbms="mysql">
			-- Break down into multiple temp table queries for performance purposes
			CREATE TEMPORARY TABLE dataset_dupe_stocks AS
			SELECT DISTINCT project_id FROM project p
			WHERE EXISTS ( SELECT 1 FROM nd_experiment e
							INNER JOIN stock s ON s.stock_id = e.stock_id
							WHERE e.project_id = p.project_id
							GROUP BY e.project_id, s.uniquename
							HAVING COUNT(DISTINCT s.stock_id) > 1
						);

			-- Store in temporary table the first/minimum stock id for the same entry for affected datasets
			CREATE TEMPORARY TABLE dupe_stocks
			SELECT project_id, st.uniquename AS entry_no, MIN(st.stock_id) AS first_stk
			FROM nd_experiment nde
			INNER JOIN stock st ON st.stock_id = nde.stock_id
			WHERE nde.project_id IN (SELECT project_id FROM dataset_dupe_stocks)
			GROUP BY project_id, st.uniquename;

			-- Procced to use the first stock id for a group of dataset stocks with the same entry #
			UPDATE nd_experiment nde
			INNER JOIN stock st ON st.stock_id = nde.stock_id
			INNER JOIN dupe_stocks ds ON ds.project_id = nde.project_id AND ds.entry_no = st.uniquename
			SET nde.stock_id = ds.first_stk
			WHERE nde.project_id IN (SELECT project_id FROM dataset_dupe_stocks);
		</sql>
	</changeSet>

</databaseChangeLog>
