<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
				   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

	<changeSet author="gelli" id="v15.1.0-1">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				SELECT
				if(DATA_TYPE = 'varchar' and CHARACTER_MAXIMUM_LENGTH = 255, 1, 0) as new_datatype
				FROM  INFORMATION_SCHEMA.COLUMNS
				WHERE table_name='key_sequence_register'
				AND column_name='key_prefix'
				AND TABLE_SCHEMA = database();
			</sqlCheck>
		</preConditions>
		<comment>Alter key_prefix data type from varchar(50) to varchar(255)</comment>
		<modifyDataType tableName="key_sequence_register" columnName="key_prefix" newDataType="varchar(255)"/>
	</changeSet>

	<changeSet author="darla" id="v15.1.0-2">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(1) > 0 FROM project p
				WHERE EXISTS ( SELECT 1 FROM nd_experiment e
								INNER JOIN stock s ON s.stock_id = e.stock_id
								WHERE e.project_id = p.project_id
								GROUP BY e.project_id, s.uniquename
								HAVING COUNT(DISTINCT s.stock_id) > 1
							);
			</sqlCheck>
		</preConditions>
		<comment>Update datasets whose stock entries are not unique per entry number</comment>
		<sql dbms="mysql">
			-- Break down into multiple temp table queries for performance purposes
			CREATE TEMPORARY TABLE dataset_dupe_stocks AS
			SELECT DISTINCT project_id FROM project p
			WHERE EXISTS ( SELECT 1 FROM nd_experiment e
							INNER JOIN stock s ON s.stock_id = e.stock_id
							WHERE e.project_id = p.project_id
							GROUP BY e.project_id, s.uniquename
							HAVING COUNT(DISTINCT s.stock_id) > 1
						);

			-- Store in temporary table the first/minimum stock id for the same entry for affected datasets
			CREATE TEMPORARY TABLE dupe_stocks
			SELECT project_id, st.uniquename AS entry_no, MIN(st.stock_id) AS first_stk
			FROM nd_experiment nde
			INNER JOIN stock st ON st.stock_id = nde.stock_id
			WHERE nde.project_id IN (SELECT project_id FROM dataset_dupe_stocks)
			GROUP BY project_id, st.uniquename;

			-- Procced to use the first stock id for a group of dataset stocks with the same entry #
			UPDATE nd_experiment nde
			INNER JOIN stock st ON st.stock_id = nde.stock_id
			INNER JOIN dupe_stocks ds ON ds.project_id = nde.project_id AND ds.entry_no = st.uniquename
			SET nde.stock_id = ds.first_stk
			WHERE nde.project_id IN (SELECT project_id FROM dataset_dupe_stocks);
		</sql>
	</changeSet>

	<changeSet author="mderamos" id="v15.1.0-3">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(1) > 0 from nd_experiment means_exp
					INNER JOIN project means ON means.project_id = means_exp.project_id AND means.dataset_type_id = 2
					INNER JOIN project plot ON plot.study_id = means.study_id AND plot.dataset_type_id = 4
					INNER JOIN nd_experiment plot_exp ON plot_exp.project_id = plot.project_id
					INNER JOIN stock means_stock ON means_stock.stock_id = means_exp.stock_id
					INNER JOIN stock plot_stock ON plot_stock.stock_id = plot_exp.stock_id
					WHERE means_stock.uniquename = plot_stock.uniquename AND means_exp.stock_id != plot_stock.stock_id;
			</sqlCheck>
		</preConditions>
		<comment>Set stock_id of means experiments to use plot experiments stock_id</comment>
		<sql dbms="mysql">
			UPDATE nd_experiment means_exp
				INNER JOIN project means ON means.project_id = means_exp.project_id AND means.dataset_type_id = 2
				INNER JOIN project plot ON plot.study_id = means.study_id AND plot.dataset_type_id = 4
				INNER JOIN nd_experiment plot_exp ON plot_exp.project_id = plot.project_id
				INNER JOIN stock means_stock ON means_stock.stock_id = means_exp.stock_id
				INNER JOIN stock plot_stock ON plot_stock.stock_id = plot_exp.stock_id
				SET means_exp.stock_id = plot_stock.stock_id
				WHERE means_stock.uniquename = plot_stock.uniquename AND means_exp.stock_id != plot_stock.stock_id;
		</sql>
	</changeSet>

	<changeSet author="mderamos" id="v15.1.0-4">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(1) > 0 FROM stock s
				WHERE NOT EXISTS ( SELECT e.stock_id FROM nd_experiment e WHERE s.stock_id = e.stock_id);
			</sqlCheck>
		</preConditions>
		<comment>Delete unused stock and stockprop entries</comment>
		<sql dbms="mysql">
			DELETE s, sp FROM stock s
				INNER JOIN stockprop sp ON s.stock_id = sp.stock_id
				WHERE NOT EXISTS ( SELECT e.stock_id FROM nd_experiment e WHERE s.stock_id = e.stock_id);
		</sql>
	</changeSet>

	<changeSet author="clarysabel" id="v15.1.0-1">
		<preConditions onFail="MARK_RAN">
			<not>
				<tableExists tableName="ims_experiment_transaction"/>
			</not>
		</preConditions>
		<comment>
			Creating table to store relationship between transactions and experiments
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CREATE TABLE ims_experiment_transaction (
			  trnid INT(11) NOT NULL,
			  nd_experiment_id INT(11) NOT NULL,
			  type INT(11) NOT NULL,
			  PRIMARY KEY (trnid, nd_experiment_id),
			  CONSTRAINT fk_ims_experiment_transaction_transaction FOREIGN KEY (trnid) REFERENCES ims_transaction (trnid),
			  CONSTRAINT fk_ims_experiment_transaction_experiment FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment (nd_experiment_id)
			);
		</sql>
	</changeSet>

	<changeSet author="aldrin" id="v15.1.0-5">
		<preConditions onFail="MARK_RAN">
			<not>
				<columnExists tableName="stock" columnName="project_id"/>
			</not>
		</preConditions>
		<comment>
			Add project_id column to stock table
		</comment>
		<addColumn tableName="stock">
			<column name="project_id" type="INT">
				<constraints nullable="true"/>
			</column>
		</addColumn>
	</changeSet>

	<changeSet author="aldrin" id="v15.1.0-6">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(*)
					FROM listnms lnms
					INNER JOIN listdata_project ldp ON lnms.listid = ldp.list_id
					INNER JOIN project p ON p.parent_project_id = lnms.projectid AND p.dataset_type_id = 4
					WHERE lnms.listtype = 'STUDY'
					AND NOT EXISTS(SELECT 1 FROM nd_experiment where project_id = p.project_id);
				</sqlCheck>
			</not>
		</preConditions>
		<comment>Migrate listdata_project to stock table. Only entry list from studies without plot experiments are migrated to the stock table.</comment>
		<sql dbms="mysql">
			-- Migrate listdata_project to stock table. Only entry list from studies without plot experiments are migrated to the stock table.
			INSERT INTO stock (dbxref_id, name, uniquename, value, type_id, project_id)
			SELECT germplasm_id, designation, entry_id, entry_code, 8300, p.study_id
			FROM listnms lnms
			INNER JOIN listdata_project ldp ON lnms.listid = ldp.list_id
			INNER JOIN project p ON p.parent_project_id = lnms.projectid AND p.dataset_type_id = 4
			WHERE lnms.listtype = 'STUDY'
			AND NOT EXISTS(SELECT 1 FROM nd_experiment where project_id = p.project_id);

			-- Create check type property records for migrated stock entries.
			-- CHECK TYPE
			INSERT INTO stockprop (stock_id, type_id, value, rank)
			SELECT stock.stock_id, 8255, ldp.check_type, (SELECT IFNULL(MAX(rank), 0) + 1 FROM stockprop WHERE stock_id = stock.stock_id)
			FROM listnms lnms
			INNER JOIN listdata_project ldp ON lnms.listid = ldp.list_id
			INNER JOIN project p ON p.parent_project_id = lnms.projectid AND p.dataset_type_id = 4
			INNER JOIN stock ON stock.project_id = p.study_id AND stock.uniquename = ldp.entry_id
			WHERE lnms.listtype = 'STUDY'
			AND NOT EXISTS(SELECT 1 FROM nd_experiment where project_id = p.project_id);

			-- SEED_SOURCE
			INSERT INTO stockprop (stock_id, type_id, value, rank)
			SELECT stock.stock_id, 8360, ldp.seed_source, (SELECT IFNULL(MAX(rank), 0) + 1 FROM stockprop WHERE stock_id = stock.stock_id)
			FROM listnms lnms
			INNER JOIN listdata_project ldp ON lnms.listid = ldp.list_id
			INNER JOIN project p ON p.parent_project_id = lnms.projectid AND p.dataset_type_id = 4
			INNER JOIN stock ON stock.project_id = p.study_id AND stock.uniquename = ldp.entry_id
			WHERE lnms.listtype = 'STUDY'
			AND NOT EXISTS(SELECT 1 FROM nd_experiment where project_id = p.project_id);

			-- GROUPNAME/CROSS
			INSERT INTO stockprop (stock_id, type_id, value, rank)
			SELECT stock.stock_id, 8377, ldp.group_name, (SELECT IFNULL(MAX(rank), 0) + 1 FROM stockprop WHERE stock_id = stock.stock_id)
			FROM listnms lnms
			INNER JOIN listdata_project ldp ON lnms.listid = ldp.list_id
			INNER JOIN project p ON p.parent_project_id = lnms.projectid AND p.dataset_type_id = 4
			INNER JOIN stock ON stock.project_id = p.study_id AND stock.uniquename = ldp.entry_id
			WHERE lnms.listtype = 'STUDY'
			AND NOT EXISTS(SELECT 1 FROM nd_experiment where project_id = p.project_id);
        </sql>
	</changeSet>

	<changeSet author="aldrin" id="v15.1.0-7">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(*) FROM stock WHERE stock.project_id IS NULL;
				</sqlCheck>
			</not>
		</preConditions>
		<comment>Associate existing stock records to their respective study</comment>
		<sql dbms="mysql">
			UPDATE  stock
			INNER JOIN nd_experiment nde ON nde.stock_id = stock.stock_id
			INNER JOIN project p ON p.project_id = nde.project_id
			SET stock.project_id = p.study_id WHERE stock.project_id IS NULL;
        </sql>
	</changeSet>

	<changeSet author="aldrin" id="v15.1.0-8">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					SELECT COUNT(*) FROM listnms WHERE listnms.listtype = 'STUDY';
				</sqlCheck>
			</not>
		</preConditions>
		<comment>Delete all STUDY germplasm list and its data</comment>
		<sql dbms="mysql">
			-- Delete all STUDY entry list data
			DELETE  ldp FROM listnms
			INNER JOIN listdata_project ldp ON listnms.listid = ldp.list_id
			WHERE listnms.listtype = 'STUDY';

			-- Delete all STUDY entry list
			DELETE  FROM listnms
			WHERE listnms.listtype = 'STUDY';
        </sql>
	</changeSet>

</databaseChangeLog>
