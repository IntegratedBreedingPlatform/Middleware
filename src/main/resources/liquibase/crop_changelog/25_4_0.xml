<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
		
		
		
<changeSet id="v25.4.1-1" author="rowena">
        <preConditions onFail="MARK_RAN">
			<and>
			<sqlCheck expectedResult="1">
				 SELECT CASE WHEN (SELECT (COUNT(1) IS NOT NULL) AS X FROM listdata l GROUP BY listid HAVING MAX(entryid)!=COUNT(entryid) LIMIT 1) IS NULL 
	                    THEN 0
                        ELSE 1 
                        END
						;
			</sqlCheck>
				<!-- Check if dataset check_listentry_table was created -->
			<sqlCheck expectedResult="0">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_listentry_sequence';
				</sqlCheck>
			</and>

        </preConditions>
		<comment>
			Create stored procedure to correct any entryno that are not in sequence
		</comment>
		<sql dbms="mysql" splitStatements="false">
			<![CDATA[
				CREATE PROCEDURE check_listentry_sequence()
				BEGIN
				
				DECLARE seq_error_count INT;
				
				DROP TABLE IF EXISTS list_seq_table;
				DROP TABLE IF EXISTS maxvalues;
		
				CREATE TABLE stock_seq_table(
					seq INT(11) NOT NULL AUTO_INCREMENT,
					entryid INT(11) DEFAULT NULL,
					project_id INT(11) DEFAULT NULL,
					stock_id INT(11) DEFAULT NULL,
					gid INT(11) DEFAULT NULL,
					PRIMARY KEY (`seq`), 
					KEY edx (entryid)
										
				) ENGINE=INNODB;

				INSERT INTO list_seq_table ( entryid, listid, lrecid , gid)
					SELECT l.entryid, l.listid, l.lrecid, gid
					FROM listdata l
					JOIN (
						SELECT listid
						FROM listdata
						WHERE lrstatus<>9
						GROUP BY listid
						HAVING MAX(entryid) <> COUNT(entryid)
						) AS subquery ON l.listid = subquery.listid
					WHERE lrstatus<>9
					ORDER BY l.listid, l.entryid;
				
				CREATE TABLE maxvalues
				SELECT
							project_id,
							MAX(seq) AS max_seq,
							MIN(seq) AS min_seq,
							COUNT(*) AS cnt
						FROM stock_seq_table
						GROUP BY project_id;
				
				SELECT COUNT(*) INTO seq_error_count FROM `list_seq_table` ;
				
				IF seq_error_count>0 THEN 
					UPDATE listdata l
					INNER JOIN maxvalues ON l.listid = maxvalues.listid
					INNER JOIN list_seq_table ON maxvalues.listid = list_seq_table.listid
					SET l.entryid = maxvalues.cnt - (maxvalues.max_seq -list_seq_table.seq )
					WHERE l.lrecid = list_seq_table.lrecid and lrstatus = 0;
				END IF;
		
				DROP TABLE IF EXISTS list_seq_table;
				DROP TABLE IF EXISTS maxvalues;	
				
				END;
				]]>
		</sql>
    </changeSet>
	
	<changeSet  id="v25.4.1-2" author="rowena">
		<preConditions onFail="MARK_RAN">
			<!-- Check if dataset check_listentry_table was created -->
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_listentry_sequence';
				</sqlCheck>
			
        </preConditions>
		<comment>
			Call stored procedure check_listentry_sequence;
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CALL check_listentry_sequence();
		</sql>
	</changeSet>

	<changeSet  id="v25.4.1-3" author="rowena">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'check_listentry_sequence';
			</sqlCheck>
		</preConditions>
		<comment>Drop procedure check_listentry_sequence</comment>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE check_listentry_sequence;
		</sql>
	</changeSet>	
	
		
<changeSet  id="v25.4.2-0" author="rowena">
		<preConditions onFail="MARK_RAN">
			<!-- Check if dataset check_stockentry_sequence was created -->
				<sqlCheck expectedResult="1">
					SELECT COUNT(*) > 1 FROM stock WHERE uniquename NOT REGEXP '^[0-9]+$';
				</sqlCheck>
			
        </preConditions>
		<comment>
			check non-integer entry_id in the stock table
		</comment>
		<sql dbms="mysql" splitStatements="true">
			UPDATE stock 
			INNER JOIN (SELECT MAX(CAST(uniquename AS UNSIGNED)) MAX_VALUE, project_id, stock_id
						FROM stock WHERE uniquename  REGEXP '^[0-9]+$' = 1 GROUP BY project_id ) t2 
			ON stock.project_id = t2.project_id AND uniquename NOT REGEXP '^[0-9]+$' 
			SET stock.uniquename = t2.max_value + 1;
		</sql>
	</changeSet>

	<changeSet id="v25.4.2-1" author="rowena">
        <preConditions onFail="MARK_RAN">
			<and>
			<!-- check if there are uniquenames that is greater than count(uniquename) -->
			<sqlCheck expectedResult="1">
				SELECT CASE WHEN 
					( SELECT stock_id FROM stock s GROUP BY project_id HAVING MAX(CAST(uniquename AS UNSIGNED))!=COUNT(CAST(uniquename AS UNSIGNED)) 
					AND stock_id NOT IN
						(
						SELECT  stock_id
						FROM    nd_experiment nd
						WHERE   nd.stock_id = stock_id
					) LIMIT 1
					) IS NULL THEN 0
					ELSE 1 
				END
		;
    
			</sqlCheck>
			<!-- Check if procedure check_stockentry_sequence table was created -->
			<sqlCheck expectedResult="0">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_stockentry_sequence';
				</sqlCheck>
			</and>

        </preConditions>
		<comment>
			Create stored procedure to correct any entryno (uniquename) that are not in sequence
		</comment>
		<sql dbms="mysql" splitStatements="false">
		<![CDATA[
				CREATE PROCEDURE check_stockentry_sequence()
				BEGIN
				
				DECLARE seq_error_count INT;
				
				
				DROP TABLE IF EXISTS maxvalues;
				CREATE TABLE stock_seq_table(
					seq INT(11) NOT NULL AUTO_INCREMENT,
					entryid INT(11) DEFAULT NULL,
					project_id INT(11) DEFAULT NULL,
					stock_id INT(11) DEFAULT NULL,
					gid INT(11) DEFAULT NULL,
					PRIMARY KEY (`seq`),
					KEY edx (entryid)
				) ENGINE=INNODB;

				INSERT INTO stock_seq_table ( entryid, project_id, stock_id, GID )
				SELECT CAST(s.uniquename AS UNSIGNED) AS entryid, s.project_id, s.stock_id, s.dbxref_id 
				FROM stock s
				INNER JOIN (
					SELECT project_id, MAX(CAST(uniquename AS UNSIGNED)) AS max_entryid, COUNT(stock_id) AS stock_count
					FROM stock
					WHERE uniquename REGEXP '^[0-9]+$' = 1
					GROUP BY project_id
					HAVING max_entryid <> stock_count
				) AS subquery
				ON s.project_id = subquery.project_id
				WHERE s.uniquename REGEXP '^[0-9]+$' = 1;
				
				ALTER TABLE list_seq_table ADD KEY stock_idx (stock); 
				
				CREATE TABLE maxvalues
				SELECT
							project_id,
							MAX(seq) AS max_seq,
							MIN(seq) AS min_seq,
							COUNT(*) AS cnt
						FROM stock_seq_table
						GROUP BY project_id;
				
				SELECT COUNT(*) INTO seq_error_count FROM `stock_seq_table` ;
				IF seq_error_count>0 THEN 
				UPDATE stock s
					INNER JOIN maxvalues ON s.project_id = maxvalues.project_id
					INNER JOIN stock_seq_table ON maxvalues.project_id = stock_seq_table.project_id
					SET s.uniquename = maxvalues.cnt - (maxvalues.max_seq - stock_seq_table.seq )
					WHERE s.stock_id = stock_seq_table.stock_id;
				END IF;
				
			END;	
		
			]]>
			
		</sql>
    </changeSet>
	
	<changeSet  id="v25.4.2-2" author="rowena">
		<preConditions onFail="MARK_RAN">
			<!-- Check if dataset check_stockentry_sequence was created -->
				<sqlCheck expectedResult="1">
					SELECT
					COUNT(*)
					FROM
					information_schema.routines
					WHERE
					routine_schema = DATABASE()
					AND specific_name = 'check_stockentry_sequence';
				</sqlCheck>
			
        </preConditions>
		<comment>
			Call stored procedure check_stockentry_sequence;
		</comment>
		<sql dbms="mysql" splitStatements="true">
			CALL check_stockentry_sequence();
		</sql>
	</changeSet>
	
	
	<changeSet  id="v25.4.2-3" author="rowena">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'check_stockentry_sequence';
			</sqlCheck>
		</preConditions>
		<comment>Drop procedure check_stockentry_sequence</comment>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE check_stockentry_sequence;
		</sql>
	</changeSet>
	
	
	
	
		
</databaseChangeLog>
