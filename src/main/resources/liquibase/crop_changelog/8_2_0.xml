<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd
		http://www.liquibase.org/xml/ns/dbchangelog-ext
		http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

	<changeSet author="cuenyad" id="v8.2.0-1">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT COUNT(*) > 0 FROM listnms WHERE listtype in ('TRIAL','NURSERY');
			</sqlCheck>
		</preConditions>
		<comment>update in listnms table  the listtype with TRIAL or NURSERY by STUDY</comment>
		<sql dbms="mysql" splitStatements="true">
			update listnms set listtype='STUDY' where listtype in ('TRIAL','NURSERY');
		</sql>
	</changeSet>

	<changeSet author="vanina" id="v8.2.0-2">
	<preConditions onFail="MARK_RAN">
				<sqlCheck expectedResult="1">
					SELECT COUNT(*)
					FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
					WHERE TABLE_NAME = 'project'
					AND CONSTRAINT_NAME = 'study_type_fk'
					AND TABLE_SCHEMA = DATABASE();
				</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
		ALTER TABLE project DROP FOREIGN KEY study_type_fk;

		ALTER TABLE project DROP INDEX study_type_fk_idx;
		</sql>
	</changeSet>

	<changeSet author="vanina" id="v8.2.0-3">
		<preConditions onFail="MARK_RAN">
			<tableExists tableName="study_type"/>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			DROP TABLE study_type;

			CREATE TABLE study_type (
			  study_type_id INT NOT NULL AUTO_INCREMENT,
			  label VARCHAR(45) NOT NULL,
			  name VARCHAR(45) NOT NULL,
			  cvterm_id INT NULL,
			  visible TINYINT NOT NULL,
			  PRIMARY KEY (study_type_id),
			  UNIQUE INDEX label_UNIQUE (label ASC),
			  UNIQUE INDEX name_UNIQUE (name ASC));

			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Nursery", "N", 10000, 1);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Hybridization Nursery", "HB", 10001, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Pedigree Nursery", "PN", 10002, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Characterization Nursery", "CN", 10003, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("BULU Observational Nursery", "BON", 10007, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Trial", "T", 10010, 1);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Observational Yield Trial", "OYT", 10005, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Replication Yield Trial", "RYT", 10015, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("On Form Trial", "OFT", 10017, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Survey", "S", 10020, 0);
			INSERT INTO study_type (label, name, cvterm_id, visible) VALUES ("Experiment", "E", 10030, 0);
		</sql>
	</changeSet>


	<changeSet author="vanina" id="v8.2.0-4">
		<preConditions onFail="MARK_RAN">
			<not><columnExists tableName="project" columnName="study_type_id"/> </not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			ALTER TABLE project
			  ADD COLUMN study_type_id INT;

			UPDATE project p SET p.study_type_id = (SELECT st.study_type_id FROM study_type st where st.name = p.study_type);

			ALTER TABLE project DROP COLUMN study_type;

			ALTER TABLE project
			  ADD CONSTRAINT study_type_fk
			FOREIGN KEY (study_type_id)
			REFERENCES study_type (study_type_id)
			  ON DELETE NO ACTION
			  ON UPDATE NO ACTION;
		</sql>
	</changeSet>

	<changeSet id="v8.2.0-5" author="clarysabel">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				select count(*) from cvterm where cvterm_id = 10169;
			</sqlCheck>
		</preConditions>
		<comment>Create entry list order experimental design</comment>
		<sql dbms="mysql" splitStatements="true">
			INSERT INTO cvterm (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype)
			VALUES (10169, 2040, 'ELO', 'Entry list order', null, 0, 0);
			INSERT INTO cvterm_relationship (type_id, subject_id, object_id)
			VALUES (1190, 17265, 10169);
		</sql>
	</changeSet>

	<changeSet id="v8.2.0-6" author="vanina">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					select count(*) from projectprop where alias = 'EXPT_DESIGN' AND value = '';
				</sqlCheck>
			</not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			UPDATE projectprop
			SET value = 10169
			WHERE alias = 'EXPT_DESIGN' AND value = '';
		</sql>
	</changeSet>


	<changeSet id="v8.2.0-7" author="vanina">
		<preConditions onFail="MARK_RAN">
			<not>
				<sqlCheck expectedResult="0">
					select count(*) from nd_geolocationprop where type_id = 8135 AND value = '';
				</sqlCheck>
			</not>
		</preConditions>
		<sql dbms="mysql" splitStatements="true">
			UPDATE nd_geolocationprop
			SET VALUE = 10169
			WHERE type_id = 8135 AND value = '';
		</sql>
	</changeSet>

		<changeSet id="v8.2.0-8" author="vanina">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_check_list';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE migrate_check_list;
		</sql>
	</changeSet>

		<changeSet id="v8.2.0-9" author="vanina">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="0">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_check_list';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			CREATE PROCEDURE migrate_check_list()
			  BEGIN
				DECLARE done INT DEFAULT FALSE;
			    DECLARE checkType INT(11);
			    DECLARE listId INT(11);
			    DECLARE designation VARCHAR(255) charset UTF8
			    COLLATE utf8_general_ci;

			    DECLARE cur1 CURSOR FOR
			      -- to update
			      SELECT
			        ldp.check_type  AS checkType,
			        ldp.designation AS designation,
			        li.listid       AS listId
			      FROM
			        listdata_project ldp
			        INNER JOIN
			        listnms nm ON ldp.list_id = nm.listid
			        INNER JOIN
			        listnms li ON li.projectid = nm.projectid
			      WHERE
			        nm.listtype = 'CHECK'
			        AND li.listtype = 'STUDY'
			        AND EXISTS((SELECT 1
			                    FROM
			                      listdata_project l
			                    WHERE
			                      l.designation = ldp.designation
			                      AND l.list_id != ldp.list_id));

			    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

			    OPEN cur1;
			    read_loop: LOOP FETCH cur1 INTO checkType, designation, listId;

				IF done THEN
	            LEAVE read_loop;
	            END IF;

			      UPDATE listdata_project ldp
			      SET
			        ldp.check_type = checkType
			      WHERE
			        ldp.designation = designation
			        AND ldp.list_id = listId;

			    END LOOP read_loop;
				CLOSE cur1;

			INSERT INTO listdata_project (list_id, germplasm_id, check_type, entry_id, entry_code, seed_source, designation, group_name, duplicate_notes, crossing_date, notes)
			      SELECT
			        (select l.listid from listnms l where l.projectid = nm.projectid and l.listtype = 'STUDY'),
			        germplasm_id,
			        check_type,
			        entry_id,
			        entry_code,
			        seed_source,
			        designation,
			        group_name,
			        duplicate_notes,
			        crossing_date,
			        ldp.notes
			      FROM
			        listdata_project ldp
			        INNER JOIN
			        listnms nm ON ldp.list_id = nm.listid
			      WHERE
			        nm.listtype = 'CHECK'
			        and not exists((select 1
			                        from listdata_project l
			                        where l.designation = ldp.designation and l.list_id != ldp.list_id));

				CREATE TABLE listnms_bkp (
				  listid int(11) NOT NULL AUTO_INCREMENT,
				  listname varchar(50) NOT NULL DEFAULT '-',
				  listdate int(11) NOT NULL DEFAULT '0',
				  listtype varchar(10) NOT NULL DEFAULT 'LST',
				  listuid int(11) NOT NULL DEFAULT '0',
				  listdesc varchar(255) NOT NULL DEFAULT '-',
				  lhierarchy int(11) DEFAULT '0',
				  liststatus int(11) DEFAULT '1',
				  sdate int(11) DEFAULT NULL,
				  edate int(11) DEFAULT NULL,
				  listlocn int(11) DEFAULT NULL,
				  listref int(11) DEFAULT NULL,
				  projectid int(11) DEFAULT '0',
				  program_uuid varchar(36) DEFAULT NULL,
				  notes text,
				  PRIMARY KEY (listid)
				);



				CREATE TABLE listdata_project_bkp(
				  listdata_project_id int(11) NOT NULL AUTO_INCREMENT,
				  list_id int(11) NOT NULL,
				  germplasm_id int(11) NOT NULL DEFAULT '0',
				  check_type int(11) NOT NULL DEFAULT '0',
				  entry_id int(11) NOT NULL DEFAULT '0',
				  entry_code varchar(47) NOT NULL DEFAULT '-',
				  seed_source varchar(255) NOT NULL DEFAULT '-',
				  designation varchar(255) NOT NULL DEFAULT '-',
				  group_name varchar(255) NOT NULL DEFAULT '-',
				  duplicate_notes varchar(600) DEFAULT NULL,
				  crossing_date int(11) DEFAULT NULL,
				  notes varchar(200) DEFAULT NULL,
				  PRIMARY KEY (listdata_project_id)
				);

				INSERT INTO listdata_project_bkp
				SELECT * FROM listdata_project
			    WHERE list_id IN (select l.listid
			                          from listnms l
			                          where l.listtype = 'CHECK' and l.listid = list_id );

			    DELETE FROM listdata_project
			    WHERE list_id IN (select l.listid
			                          from listnms l
			                          where l.listtype = 'CHECK' and l.listid = list_id );

				INSERT INTO listnms_bkp
				SELECT *  FROM listnms
			    WHERE listtype = 'CHECK';

			    DELETE FROM listnms
			    WHERE listtype = 'CHECK';
			  END;
		</sql>
		</changeSet>

	<changeSet id="v8.2.0-10" author="vanina">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_check_list';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			call migrate_check_list();
		</sql>
	</changeSet>

	<changeSet id="v8.2.0-11" author="vanina">
		<preConditions onFail="MARK_RAN">
			<sqlCheck expectedResult="1">
				SELECT
				COUNT(*)
				FROM
				information_schema.routines
				WHERE
				routine_schema = DATABASE()
				AND specific_name = 'migrate_check_list';
			</sqlCheck>
		</preConditions>
		<sql dbms="mysql" splitStatements="false">
			DROP PROCEDURE migrate_check_list;
		</sql>
	</changeSet>
</databaseChangeLog>
